'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Captitalize the first letter of a string
 * @param {string} string - The string to be capitalized
 */
var capitalize = function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};
/**
 * Eliminate orphans from the end of a string, replacing spaces with &nbsp;
 * @param {string} string - The string to be de-orphaned
 * @param {string} [count = 12] - Total char count from end of string in which to replace spaces
 */

var eliminateOrphans = function eliminateOrphans(string, count) {
  var charArray = string.split(''),
      charArrayEnd = charArray.splice(-(count || 12)).map(function (_char) {
    return _char.match(/\s/) ? '&nbsp;' : _char;
  });
  return charArray.concat(charArrayEnd).join('');
};
/**
 * Mitigate widows at the end of a string, replacing spaces with &nbsp;
 * @param {string} string - The string to modify
 * @param {string} [unbreakLimit = 12] - Unbroken part won't exceed this length
 * @returns {string} - String with final spaces up to unbreakLimit replaced
 */

var mitigateWidows = function mitigateWidows(string) {
  var unbreakLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;
  var parts = string.split(' ');
  var reversedParts = parts.reduce(function (acc, part) {
    acc.unshift(part);
    return acc;
  }, []);

  var _reversedParts$reduce = reversedParts.reduce(function (acc, part) {
    var breakGroup = acc.breakGroup,
        unbreakGroup = acc.unbreakGroup;
    var newUnbreakLen = [part].concat(unbreakGroup).join(' ').length;
    var limitExceeded = breakGroup.length || newUnbreakLen > unbreakLimit;

    if (limitExceeded) {
      breakGroup.unshift(part);
    } else {
      unbreakGroup.unshift(part);
    }

    return acc;
  }, {
    breakGroup: [],
    unbreakGroup: []
  }),
      breakGroup = _reversedParts$reduce.breakGroup,
      unbreakGroup = _reversedParts$reduce.unbreakGroup;

  var breakString = breakGroup.join(' ');
  var unbreakString = unbreakGroup.join('&nbsp;');
  var bothNonEmpty = breakString && unbreakString;
  return [breakString, unbreakString].join(bothNonEmpty ? ' ' : '');
};

exports.capitalize = capitalize;
exports.eliminateOrphans = eliminateOrphans;
exports.mitigateWidows = mitigateWidows;
