/**
 * Captitalize the first letter of a string
 * @param {string} string - The string to be capitalized
 */
export const capitalize = string => {
  return string.charAt(0).toUpperCase() + string.slice(1)
}

/**
 * Eliminate orphans from the end of a string, replacing spaces with &nbsp;
 * @param {string} string - The string to be de-orphaned
 * @param {string} [count = 12] - Total char count from end of string in which to replace spaces
 */
export const eliminateOrphans = (string, count) => {
  const charArray = string.split(''),
    charArrayEnd = charArray.splice(-(count || 12)).map(char => {
      return char.match(/\s/) ? '&nbsp;' : char
    })

  return charArray.concat(charArrayEnd).join('')
}

/**
 * Mitigate widows at the end of a string, replacing spaces with &nbsp;
 * @param {string} string - The string to modify
 * @param {string} [unbreakLimit = 12] - Unbroken part won't exceed this length
 * @returns {string} - String with final spaces up to unbreakLimit replaced
 */
export const mitigateWidows = (string, unbreakLimit = 12) => {
  const parts = string.split(' ')
  const reversedParts = parts.reduce((acc, part) => {
    acc.unshift(part)
    return acc
  }, [])
  const { breakGroup, unbreakGroup } = reversedParts.reduce(
    (acc, part) => {
      const { breakGroup, unbreakGroup } = acc
      const newUnbreakLen = [part].concat(unbreakGroup).join(' ').length
      const limitExceeded = breakGroup.length || newUnbreakLen > unbreakLimit
      if (limitExceeded) {
        breakGroup.unshift(part)
      } else {
        unbreakGroup.unshift(part)
      }
      return acc
    },
    { breakGroup: [], unbreakGroup: [] }
  )
  const breakString = breakGroup.join(' ')
  const unbreakString = unbreakGroup.join('&nbsp;')
  const bothNonEmpty = breakString && unbreakString
  return [breakString, unbreakString].join(bothNonEmpty ? ' ' : '')
}
