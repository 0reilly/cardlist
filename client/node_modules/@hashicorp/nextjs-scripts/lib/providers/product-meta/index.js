"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withProductMeta = exports.ProductMetaProvider = exports.ProductContext = void 0;
const React = __importStar(require("react"));
const style_module_css_1 = __importDefault(require("./style.module.css"));
const capitalize_1 = __importDefault(require("../../text/capitalize"));
const DEFAULT = {
    name: 'Hashicorp',
    slug: 'hashicorp',
};
const ProductContext = React.createContext(DEFAULT);
exports.ProductContext = ProductContext;
/**
 * fn `useProductMeta` is designed to work both within and outside of a Product Context.
 * Components can pass a product name directly and get metadata outside of context,
 * or they can set the 'product' higher up in the tree via `ProductMetaProvider`, call
 * `useProductMeta` without passing a product argument, contex will provide the correct metadata.
 *  */
function useProductMeta(_product) {
    var _a;
    const product = _product === null || _product === void 0 ? void 0 : _product.toLowerCase();
    const ctx = (_a = React.useContext(ProductContext)) !== null && _a !== void 0 ? _a : DEFAULT;
    const slug = product !== null && product !== void 0 ? product : ctx.slug;
    const name = capitalize_1.default(product !== null && product !== void 0 ? product : ctx.name);
    const themeClass = product ? style_module_css_1.default[product] : ctx.themeClass; // class resets base `brand` css variables per theme
    if (process.env.NODE_ENV !== 'production' && !ctx && !product) {
        console.warn('@hashicorp/nextjs-scripts: No product context or product prop detected, Hashicorp theme & product defaults will apply.');
    }
    return { name, slug, themeClass };
}
function withProductMeta(Component) {
    return function _withProductMeta(props) {
        const meta = useProductMeta(props.product);
        return React.createElement(Component, Object.assign({}, props, { product: meta })); // product prop is overridden
    };
}
exports.withProductMeta = withProductMeta;
const ProductMetaProvider = React.memo(function Provider({ product, children, }) {
    const ctxValue = useProductMeta(product);
    return (React.createElement(ProductContext.Provider, { value: ctxValue }, children));
});
exports.ProductMetaProvider = ProductMetaProvider;
exports.default = useProductMeta;
