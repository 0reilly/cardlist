import * as React from 'react';
interface ProductMeta {
    name: string;
    slug: string;
    themeClass?: string;
}
declare type Products = 'hashicorp' | 'boundary' | 'consul' | 'nomad' | 'packer' | 'terraform' | 'vault' | 'vagrant' | 'waypoint';
declare const ProductContext: React.Context<ProductMeta>;
/**
 * fn `useProductMeta` is designed to work both within and outside of a Product Context.
 * Components can pass a product name directly and get metadata outside of context,
 * or they can set the 'product' higher up in the tree via `ProductMetaProvider`, call
 * `useProductMeta` without passing a product argument, contex will provide the correct metadata.
 *  */
declare function useProductMeta(_product?: Products): ProductMeta;
interface withProductProps {
    product?: Products;
}
declare function withProductMeta<T extends withProductProps>(Component: React.ComponentType<T>): React.ComponentType<T>;
interface ProductProviderProps {
    product: Products;
    children: React.ReactNode;
}
declare const ProductMetaProvider: React.NamedExoticComponent<ProductProviderProps>;
export default useProductMeta;
export { Products, ProductMeta, ProductContext, ProductMetaProvider, withProductMeta, };
