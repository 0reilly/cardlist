"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_consent_manager_1 = __importStar(require("@hashicorp/react-consent-manager"));
const categories_1 = __importDefault(require("./categories"));
const oss_1 = __importDefault(require("./presets/oss"));
const enterprise_1 = __importDefault(require("./presets/enterprise"));
function createConsentManager({ segmentWriteKey = process.env.SEGMENT_WRITE_KEY, preset, segmentServices, otherServices, categories, forceShow = false, }) {
    // if hashi env is present, check against it. if not, fall back to checking node env
    const isProd = process.env.HASHI_ENV
        ? process.env.HASHI_ENV === 'production'
        : process.env.NODE_ENV === 'production';
    if (!process.env.HASHI_ENV)
        console.warn('Consent manager expects the "HASHI_ENV" environment variable to be set in order to ensure proper analytics tracking. Please make sure "HASHI_ENV" is set appropriately within your app.');
    // set the correct segment key based on environment
    const segmentKey = isProd
        ? segmentWriteKey
        : '0EXTgkNx0Ydje2PGXVbRhpKKoe5wtzcE';
    // same for the utility server
    let utilityServerRoot = isProd
        ? 'https://util.hashicorp.com'
        : 'https://hashicorp-web-util-staging.herokuapp.com';
    // allow per-project utility server override. useful for local development
    if (process.env.UTIL_SERVER) {
        utilityServerRoot = process.env.UTIL_SERVER.replace(/\/$/, '');
    }
    // next we build the config objct, kicking it off with the default values
    let config = {
        version: 4,
        companyName: 'HashiCorp',
        privacyPolicyLink: 'https://www.hashicorp.com/privacy',
        segmentWriteKey: segmentKey,
        utilServerRoot: utilityServerRoot,
        categories: categories_1.default,
        forceShow,
    };
    // add preset values if present
    if (preset === 'oss')
        config = { ...config, ...oss_1.default };
    if (preset === 'enterprise')
        config = { ...config, ...enterprise_1.default };
    // add any other custom values nondestructively if present
    if (segmentServices) {
        if (!config.segmentServices)
            config.segmentServices = [];
        config.segmentServices.push(...segmentServices);
    }
    if (otherServices) {
        if (!config.additionalServices)
            config.additionalServices = [];
        config.additionalServices.push(...otherServices);
    }
    if (categories)
        config.categories.push(...categories);
    // finally, we return a HOC that will render the fully configured consent manager
    return {
        ConsentManager: function ConsentManagerWrapper() {
            return react_1.default.createElement(react_consent_manager_1.default, Object.assign({}, config));
        },
        openConsentManager: react_consent_manager_1.open,
    };
}
exports.default = createConsentManager;
