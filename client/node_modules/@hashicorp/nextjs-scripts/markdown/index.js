"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const remark_plugins_1 = require("@hashicorp/remark-plugins");
const rehype_prism_1 = __importDefault(require("@mapbox/rehype-prism"));
const remark_math_1 = __importDefault(require("remark-math"));
const rehype_katex_1 = __importDefault(require("rehype-katex"));
function markdownDefaults(options = {}) {
    const res = {};
    // Set default remark/rehype plugins
    // Add user-provided remark plugins if present
    const remarkDefaults = remark_plugins_1.allPlugins(options.pluginOptions);
    res.remarkPlugins = options.addRemarkPlugins
        ? [...remarkDefaults, ...options.addRemarkPlugins]
        : remarkDefaults;
    const rehypeDefaults = [[rehype_prism_1.default, { ignoreMissing: true }]];
    res.rehypePlugins = options.addRehypePlugins
        ? [...rehypeDefaults, ...options.addRehypePlugins]
        : rehypeDefaults;
    // Convenience option to replace `{ pluginOptions: { includeMarkdown: { resolveFrom: '<PATH>' } } }`
    // with simply `{ resolveIncludes: '<PATH>' }`
    if (options.resolveIncludes) {
        res.remarkPlugins = res.remarkPlugins.map((entry) => {
            const [plugin, opts] = Array.isArray(entry) ? entry : [entry, undefined];
            if (typeof plugin === 'function' &&
                plugin.name === 'includeMarkdownPlugin') {
                return [plugin, { ...opts, resolveFrom: options.resolveIncludes }];
            }
            else {
                return entry;
            }
        });
    }
    // Add math plugins if enabled
    if (options.enableMath) {
        res.remarkPlugins.push(remark_math_1.default);
        res.rehypePlugins.push(rehype_katex_1.default);
    }
    return res;
}
exports.default = markdownDefaults;
