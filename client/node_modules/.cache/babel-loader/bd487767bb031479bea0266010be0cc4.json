{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStateFromTextArea = getStateFromTextArea;\nObject.defineProperty(exports, \"bold\", {\n  enumerable: true,\n  get: function get() {\n    return _bold.bold;\n  }\n});\nObject.defineProperty(exports, \"code\", {\n  enumerable: true,\n  get: function get() {\n    return _code.code;\n  }\n});\nObject.defineProperty(exports, \"italic\", {\n  enumerable: true,\n  get: function get() {\n    return _italic.italic;\n  }\n});\nObject.defineProperty(exports, \"link\", {\n  enumerable: true,\n  get: function get() {\n    return _link.link;\n  }\n});\nObject.defineProperty(exports, \"unorderedListCommand\", {\n  enumerable: true,\n  get: function get() {\n    return _list.unorderedListCommand;\n  }\n});\nObject.defineProperty(exports, \"orderedListCommand\", {\n  enumerable: true,\n  get: function get() {\n    return _list.orderedListCommand;\n  }\n});\nObject.defineProperty(exports, \"checkedListCommand\", {\n  enumerable: true,\n  get: function get() {\n    return _list.checkedListCommand;\n  }\n});\nObject.defineProperty(exports, \"quote\", {\n  enumerable: true,\n  get: function get() {\n    return _quote.quote;\n  }\n});\nObject.defineProperty(exports, \"hr\", {\n  enumerable: true,\n  get: function get() {\n    return _hr.hr;\n  }\n});\nObject.defineProperty(exports, \"title\", {\n  enumerable: true,\n  get: function get() {\n    return _title.title;\n  }\n});\nObject.defineProperty(exports, \"divider\", {\n  enumerable: true,\n  get: function get() {\n    return _divider.divider;\n  }\n});\nObject.defineProperty(exports, \"codePreview\", {\n  enumerable: true,\n  get: function get() {\n    return _preview.codePreview;\n  }\n});\nObject.defineProperty(exports, \"codeEdit\", {\n  enumerable: true,\n  get: function get() {\n    return _preview.codeEdit;\n  }\n});\nObject.defineProperty(exports, \"codeLive\", {\n  enumerable: true,\n  get: function get() {\n    return _preview.codeLive;\n  }\n});\nObject.defineProperty(exports, \"fullscreen\", {\n  enumerable: true,\n  get: function get() {\n    return _fullscreen.fullscreen;\n  }\n});\nObject.defineProperty(exports, \"image\", {\n  enumerable: true,\n  get: function get() {\n    return _image.image;\n  }\n});\nObject.defineProperty(exports, \"strikethrough\", {\n  enumerable: true,\n  get: function get() {\n    return _strikeThrough.strikethrough;\n  }\n});\nexports.TextAreaTextApi = exports.TextAreaCommandOrchestrator = exports.getCommands = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _bold = require(\"./bold\");\n\nvar _code = require(\"./code\");\n\nvar _italic = require(\"./italic\");\n\nvar _link = require(\"./link\");\n\nvar _list = require(\"./list\");\n\nvar _quote = require(\"./quote\");\n\nvar _hr = require(\"./hr\");\n\nvar _title = require(\"./title\");\n\nvar _divider = require(\"./divider\");\n\nvar _preview = require(\"./preview\");\n\nvar _fullscreen = require(\"./fullscreen\");\n\nvar _image = require(\"./image\");\n\nvar _strikeThrough = require(\"./strikeThrough\");\n\nvar _InsertTextAtPosition = _interopRequireDefault(require(\"../utils/InsertTextAtPosition\"));\n\nvar getCommands = function getCommands() {\n  return [_bold.bold, _italic.italic, _strikeThrough.strikethrough, _hr.hr, _title.title, _divider.divider, _link.link, _quote.quote, _code.code, _image.image, _divider.divider, _list.unorderedListCommand, _list.orderedListCommand, _list.checkedListCommand, _divider.divider, _preview.codeEdit, _preview.codeLive, _preview.codePreview, _divider.divider, _fullscreen.fullscreen];\n};\n\nexports.getCommands = getCommands;\n\nfunction getStateFromTextArea(textArea) {\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd\n    },\n    text: textArea.value,\n    selectedText: textArea.value.slice(textArea.selectionStart, textArea.selectionEnd)\n  };\n}\n\nvar TextAreaTextApi = /*#__PURE__*/function () {\n  function TextAreaTextApi(textArea) {\n    (0, _classCallCheck2.default)(this, TextAreaTextApi);\n    this.textArea = void 0;\n    this.textArea = textArea;\n  }\n\n  (0, _createClass2.default)(TextAreaTextApi, [{\n    key: \"replaceSelection\",\n    value: function replaceSelection(text) {\n      (0, _InsertTextAtPosition.default)(this.textArea, text);\n      return getStateFromTextArea(this.textArea);\n    }\n  }, {\n    key: \"setSelectionRange\",\n    value: function setSelectionRange(selection) {\n      this.textArea.focus();\n      this.textArea.selectionStart = selection.start;\n      this.textArea.selectionEnd = selection.end;\n      return getStateFromTextArea(this.textArea);\n    }\n  }]);\n  return TextAreaTextApi;\n}();\n\nexports.TextAreaTextApi = TextAreaTextApi;\n\nvar TextAreaCommandOrchestrator = /*#__PURE__*/function () {\n  function TextAreaCommandOrchestrator(textArea) {\n    (0, _classCallCheck2.default)(this, TextAreaCommandOrchestrator);\n    this.textArea = void 0;\n    this.textApi = void 0;\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n\n  (0, _createClass2.default)(TextAreaCommandOrchestrator, [{\n    key: \"executeCommand\",\n    value: function executeCommand(command) {\n      command.execute && command.execute(getStateFromTextArea(this.textArea), this.textApi);\n    }\n  }]);\n  return TextAreaCommandOrchestrator;\n}();\n\nexports.TextAreaCommandOrchestrator = TextAreaCommandOrchestrator;","map":{"version":3,"sources":["../../../src/commands/index.ts"],"names":["getCommands","bold","italic","strikethrough","hr","title","divider","link","quote","code","image","unorderedListCommand","orderedListCommand","checkedListCommand","codeEdit","codeLive","codePreview","fullscreen","selection","start","textArea","end","selectionEnd","text","selectedText","TextAreaTextApi","getStateFromTextArea","TextAreaCommandOrchestrator","textApi","command"],"mappings":"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","sourcesContent":["import { bold } from './bold';\nimport { code } from './code';\nimport { italic } from './italic';\nimport { link } from './link';\nimport { unorderedListCommand, orderedListCommand, checkedListCommand } from './list';\nimport { quote } from './quote';\nimport { hr } from './hr';\nimport { title } from './title';\nimport { divider } from './divider';\nimport { codePreview, codeEdit, codeLive } from './preview';\nimport { fullscreen } from './fullscreen';\nimport { image } from './image';\nimport { strikethrough } from './strikeThrough';\nimport insertText from '../utils/InsertTextAtPosition';\n\nexport interface CommandOrchestrator {\n  executeCommand(command: ICommand): void\n}\n\nexport interface ICommand<T = string> {\n  name?: string,\n  icon?: React.ReactElement,\n  keyCommand: string,\n  value?: T,\n  position?: 'right'\n  liProps?: React.LiHTMLAttributes<HTMLLIElement>,\n  buttonProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | null,\n  execute?: (state: TextState, api: TextApi) => void,\n}\n\nexport interface TextRange {\n  start: number;\n  end: number;\n}\n\nexport interface TextState {\n  text: string,\n  selectedText: string,\n  selection: TextRange,\n}\n\nexport interface TextApi {\n  /**\n   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the\n   * selection start and selection end will be the same and will both point to the end\n   * @param text Text that should replace the current selection\n   */\n  replaceSelection(text: string): TextState;\n\n  /**\n   * Selects the specified text range\n   * @param selection\n   */\n  setSelectionRange(selection: TextRange): TextState;\n}\n\n\nconst getCommands: () => ICommand[] = () => [\n  bold, italic, strikethrough, hr, title, divider, link, quote, code, image, divider,\n  unorderedListCommand, orderedListCommand, checkedListCommand, divider, codeEdit, codeLive, codePreview, divider, fullscreen,\n];\n\nfunction getStateFromTextArea(textArea: HTMLTextAreaElement): TextState {\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd\n    },\n    text: textArea.value,\n    selectedText: textArea.value.slice(textArea.selectionStart, textArea.selectionEnd)\n  };\n}\n\nclass TextAreaTextApi implements TextApi {\n  textArea: HTMLTextAreaElement;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n  }\n\n  replaceSelection(text: string): TextState {\n    insertText(this.textArea, text);\n    return getStateFromTextArea(this.textArea);\n  }\n\n  setSelectionRange(selection: TextRange): TextState {\n    this.textArea.focus();\n    this.textArea.selectionStart = selection.start;\n    this.textArea.selectionEnd = selection.end;\n    return getStateFromTextArea(this.textArea);\n  }\n}\n\n\nclass TextAreaCommandOrchestrator implements CommandOrchestrator {\n  textArea: HTMLTextAreaElement;\n  textApi: TextApi;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n\n  executeCommand(command: ICommand<string>): void {\n    command.execute && command.execute(getStateFromTextArea(this.textArea), this.textApi);\n  }\n}\n\nexport {\n  // Toolbars.\n  bold, italic, strikethrough, hr, title, divider, link, quote, code, image,\n  unorderedListCommand, orderedListCommand, checkedListCommand, codeEdit, codeLive, codePreview, fullscreen,\n  // Tool method.\n  getCommands, getStateFromTextArea, TextAreaCommandOrchestrator, TextAreaTextApi\n}\n"]},"metadata":{},"sourceType":"script"}