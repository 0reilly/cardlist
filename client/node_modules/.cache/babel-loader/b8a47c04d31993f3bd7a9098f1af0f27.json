{"ast":null,"code":"var _jsxFileName = \"/Users/adamoreilly/Desktop/SP2020/yelp/client/src/components/PayButton.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./App.css\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nconst PayButton = props => {\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  let history = useHistory();\n  useEffect(() => {\n    window.scrollTo(0, 0); // Create PaymentIntent as soon as the page loads\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    props.setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const paymentIntent = async e => {\n    e.preventDefault();\n    console.log(\"created payment intent\");\n    window.fetch(\"https://productroles.herokuapp.com/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          price: props.price\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      console.log(\"payment intent created\" + data.clientSecret);\n      handleSubmit(data.clientSecret);\n    });\n  };\n\n  const handleSubmit = async clientSecret => {\n    console.log(\"confirming payment\");\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: props.card\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      handleForm();\n    }\n  };\n\n  const goHome = () => {\n    history.push(\"/\");\n  };\n\n  const handleForm = () => {\n    props.form();\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: paymentIntent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: succeeded ? \"p-4 row justified-content-center result-message hidden\" : \"p-4 row justified-content-center result-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: processing || props.disabled || succeeded,\n    className: \"col btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 146\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, processing ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }) : \"Pay Now\", \" $\", props.price / 100))), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-error\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, error));\n};\n\nexport default PayButton;","map":{"version":3,"sources":["/Users/adamoreilly/Desktop/SP2020/yelp/client/src/components/PayButton.jsx"],"names":["React","useState","useEffect","useHistory","CardElement","useStripe","useElements","PayButton","props","succeeded","setSucceeded","error","setError","processing","setProcessing","clientSecret","setClientSecret","stripe","elements","history","window","scrollTo","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","setDisabled","empty","message","paymentIntent","e","preventDefault","console","log","fetch","method","headers","body","JSON","stringify","items","price","then","res","json","data","handleSubmit","payload","confirmCardPayment","payment_method","card","handleForm","goHome","push","form","disabled"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\"\nimport \"./App.css\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\n\nconst PayButton = (props) => {\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  let history = useHistory(); \n  \n  useEffect(() => {\n    window.scrollTo(0, 0);\n    // Create PaymentIntent as soon as the page loads\n    \n  }, []);\n\n\n  \n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const handleChange = async (event) => {\n\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    props.setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\nconst paymentIntent = async (e) => {\n  \n  e.preventDefault();\n  console.log(\"created payment intent\")\n  window\n      .fetch(\"https://productroles.herokuapp.com/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({items: [{ price: props.price }]})\n      })\n      .then(res => {\n        \n        return res.json();\n        \n      })\n      .then(data => {\n\n        console.log(\"payment intent created\"+data.clientSecret)\n        handleSubmit(data.clientSecret);\n      });\n}\n\n  const handleSubmit = async (clientSecret) => {\n    console.log(\"confirming payment\")\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: props.card\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n        \n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      handleForm();\n    }\n  };\n\n  const goHome = () => {\n    history.push(\"/\");\n  }\n  const handleForm = () => {\n      \n        props.form();\n  }\n  return (\n    <form id=\"payment-form\" onSubmit={paymentIntent}>\n      <div className={succeeded ? \"p-4 row justified-content-center result-message hidden\" : \"p-4 row justified-content-center result-message\" }><button\n        disabled={processing || props.disabled || succeeded}\n        className=\"col btn btn-primary\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className=\"spinner\" id=\"spinner\"></div>\n          ) : (\n            \"Pay Now\"\n          )} ${props.price/100}\n        </span>\n      </button></div>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"card-error\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      \n      \n      \n    </form>\n  );\n}\n\nexport default PayButton"]},"metadata":{},"sourceType":"module"}