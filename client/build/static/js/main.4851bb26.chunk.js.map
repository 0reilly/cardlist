{"version":3,"sources":["apis/OrderFinder.js","apis/EmailPoster.js","apis/Cards.js","components/CardForm.jsx","apis/PaymentIntent.js","apis/StartVerify.js","apis/CheckCode.js","components/OTP.jsx","components/Tap.jsx","routes/Tap.jsx","App.jsx","index.js"],"names":["axios","create","baseURL","CardForm","props","useState","useStripe","useElements","useHistory","useEffect","window","scrollTo","handleChange","event","a","setDisabled","empty","setError","error","message","id","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","onChange","OTP","className","otp","map","data","index","type","name","maxLength","key","value","e","element","isNaN","setOtp","d","idx","nextSibling","focus","target","onFocus","select","join","onClick","v","verifyCode","Tap","Array","fill","phoneRequested","setPhoneRequested","useParams","setClientSecret","selectedCard","setSelectedCard","stripe","elements","items","setItems","useLocalStorage","acctID","setAcctId","storeName","setStoreName","successURL","setSuccessURL","returnURL","setReturnURL","subtotal","setSubtotal","shipping","setShipping","taxes","setTaxes","total","setTotal","phoneError","setPhoneError","setName","addressOne","setAddressOne","addressTwo","city","setCity","state","setState","zip","setZip","phone","setPhone","phoneEntered","setPhoneEntered","email","setEmail","emailEntered","setEmailEntered","newCardForm","setNewCardForm","cusID","setCusID","paymentMethods","setPaymentMethods","billing","setBilling","billingExists","setBillingExists","disabled","succeeded","setSucceeded","processing","setProcessing","OrderFinder","get","response","console","log","order","paid","acctid","storename","successurl","returnurl","fetchData","setPaid","post","paymentIntent","preventDefault","PaymentIntent","amount","customer","account","pi","JSON","stringify","handleSubmit","clientSecret","confirmCardPayment","payment_method","card","getElement","CardElement","payload","handleEmailSet","handleEmailPhoneSet","EmailPoster","Cards","cards","length","handleSetBilling","address","line1","line2","postal_code","editEmail","editBilling","editPhone","cancelEditBilling","initialValue","item","localStorage","getItem","parse","storedValue","setStoredValue","valueToStore","Function","setItem","requestCode","StartVerify","verify","CheckCode","code","href","class","role","placeholder","paymentMethod","selectPM","brand","last4","price","onSubmit","TapPay","App","loadStripe","promise","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4851bb26.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"http://localhost:3006/api/v1/orders\"\n});","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"http://localhost:3006/api/v1/emails\"\n});","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"http://localhost:3006/api/v1/cards\"\n});","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\"\nimport \"./App.css\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\n\nconst CardForm= (props) => {\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  let history = useHistory(); \n  \n  useEffect(() => {\n    window.scrollTo(0, 0);\n    // Create PaymentIntent as soon as the page loads\n  }, []);\n\n\n  \n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const handleChange = async (event) => {\n\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    props.setDisabled(event.empty);\n    props.setError(event.error ? event.error.message : \"\");\n  };\n\n\n\n  \n\n  const goHome = () => {\n    history.push(\"/\");\n  }\n  const handleForm = () => {\n    props.form();\n  }\n  return (\n  <>\n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n    </>\n  );\n}\n\nexport default CardForm","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"http://localhost:3006/create-payment-intent\"\n});","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"/start-twilio-verify\"\n});","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"http://localhost:3006/check-twilio-verify\"\n});","import React, { useState, useEffect } from \"react\";\n\n\nconst OTP = (props) => {\n  \n  \n    const handleChange = (element, index) => {\n        if(isNaN(element.value)) return false;\n\n        props.setOtp([...props.otp.map((d, idx)=> (idx ===index) ? element.value : d)]);\n\n        //focus next input box \n        if(element.nextSibling){\n            element.nextSibling.focus();\n        }\n    };\n\n\n  return (\n    <div className=\"row\">\n            <div className=\"col text-center\">\n                <p>Enter the OTP in the field below to verify your phone number</p>\n\n                {\n                    props.otp.map((data,index) => {\n                        return <input\n                        className=\"otp-field\"\n                        type=\"text\"\n                        name=\"otp\"\n                        maxLength=\"1\"\n                        key={index}\n                        value={data}\n                        onChange={e => handleChange(e.target, index)}\n                        onFocus={e => e.target.select}\n                        />\n                    })\n                }\n                <p> OTP Entered - {props.otp.join(\"\")}</p>\n                <p>\n                    <button onClick={e => props.setOtp([...props.otp.map(v => \"\")])} className=\"btn btn-secondary mr-2\">Clear</button>\n                    <button onClick={props.verifyCode} className=\"btn btn-primary\">Verify OTP</button>\n                </p>\n            </div>\n      \n    </div>\n  );\n};\n\nexport default OTP;","import React , {Component, useEffect, useState} from 'react';\nimport { useParams} from \"react-router-dom\";\nimport OrderFinder from '../apis/OrderFinder';\nimport EmailPoster from '../apis/EmailPoster';\nimport Cards from '../apis/Cards';\nimport {\n    CardElement,\n    useStripe,\n    useElements\n  } from \"@stripe/react-stripe-js\";\nimport CardForm from './CardForm';\nimport PaymentIntent from '../apis/PaymentIntent';\nimport 'react-phone-number-input/style.css'\nimport PhoneInput from 'react-phone-number-input'\nimport StartVerify from '../apis/StartVerify';\nimport CheckCode from '../apis/CheckCode';\n\nimport OTP from \"./OTP\";\n\n\n\n\nconst Tap = () => {\n    const [otp, setOtp] = useState(new Array(6).fill());\n    const [phoneRequested, setPhoneRequested] = useState(false);\n\n    const {id} = useParams();\n    const [clientSecret, setClientSecret] = useState();\n    const [selectedCard, setSelectedCard] = useState();\n    const stripe = useStripe();\n    const elements = useElements();\n    \n    //from server response\n    const [items, setItems] = useState([]);\n    const [acctID, setAcctId] = useLocalStorage(\"acctID\", \"\");\n    const [storeName, setStoreName] = useState(\"\");\n    const [successURL, setSuccessURL] = useState(\"\");\n    const [returnURL, setReturnURL] = useState(\"\");\n    const [subtotal, setSubtotal] = useState(0);\n    const [shipping, setShipping] = useState(0);\n    const [taxes, setTaxes] = useState(0);\n    const [total, setTotal] = useState(0);\n    const [phoneError, setPhoneError] = useState(false);\n    \n    \n    //billing fields\n    const [name, setName] = useState(\"\");\n    const [addressOne, setAddressOne] = useState(\"\");\n    const [addressTwo, setAddressTwo] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [state, setState] = useState(\"\");\n    const [zip, setZip] = useState(\"\");\n\n    //from customer\n    const [phone, setPhone] = useState(\"\");\n    const [phoneEntered, setPhoneEntered] = useState(false);\n    const [email, setEmail] = useState(\"\");\n    const [emailEntered, setEmailEntered] = useState(false);\n    const [newCardForm, setNewCardForm] = useState();\n   \n\n    //from stripe\n    const [cusID, setCusID] = useState();\n    const [paymentMethods, setPaymentMethods] = useState([]);\n    const [billing, setBilling] = useLocalStorage({});\n    const [billingExists, setBillingExists] = useState(false);\n    const [disabled, setDisabled] = useState(true);\n    const [succeeded, setSucceeded] = useState(false);\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState('');\n    \n    \n\n\n    const cardStyle = {\n        style: {\n          base: {\n            color: \"#32325d\",\n            fontFamily: 'Arial, sans-serif',\n            fontSmoothing: \"antialiased\",\n            fontSize: \"16px\",\n            \"::placeholder\": {\n              color: \"#32325d\"\n            }\n          },\n          invalid: {\n            color: \"#fa755a\",\n            iconColor: \"#fa755a\"\n          }\n        }\n      };\n\n    useEffect( () => {\n        \n        const fetchData = async () => {\n        \n        \n        try {\n            const response = await OrderFinder.get(\"/\"+id);\n            console.log(response.data.data);\n            setSucceeded(response.data.data.order[0].paid);\n            \n            setItems(response.data.data.items)\n            setAcctId(response.data.data.order[0].acctid);\n            setStoreName(response.data.data.order[0].storename);\n            setSubtotal(response.data.data.order[0].subtotal);\n            setShipping(response.data.data.order[0].shipping);\n            setTaxes(response.data.data.order[0].taxes);\n            setTotal(response.data.data.order[0].total);\n            setSuccessURL(response.data.data.order[0].successurl);\n            setReturnURL(response.data.data.order[0].returnurl);\n         } catch(err){\n           console.log(err)\n         }\n            \n        \n       }\n       fetchData();\n\n    },[]);\n\n    const setPaid = async () => {\n        try {\n            const response = await OrderFinder.post(\"/\"+id, {\n                paid: true\n            });\n            setSucceeded(true);\n        }\n        catch (err){\n            console.log(error)\n        }\n    }\n        \n\n    const paymentIntent = async (e) => {\n  \n        e.preventDefault();\n        console.log(\"creating payment intent\")\n        try {\n            const pi = await PaymentIntent.post(\"/\", {\n                \n                    amount : total,\n                    customer : cusID,\n                    account: acctID,\n                \n            });\n            console.log(\"payment intent created\"+JSON.stringify(pi))\n            handleSubmit(pi.data.clientSecret);\n        }\n        catch (err){\n            console.log(error)\n        }\n              \n           \n      }\n      \n        const handleSubmit = async (clientSecret) => {\n          console.log(\"confirming payment\")\n          setProcessing(true);\n          const payload = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: (newCardForm ? {\n                card : elements.getElement(CardElement) \n              } : selectedCard.id) \n          });\n          if (payload.error) {\n            setError(`Payment failed ${payload.error.message}`);\n            setProcessing(false);\n          } else {\n              \n            setError(null);\n            setProcessing(false);\n            setSucceeded(true);\n            setPaid();\n           \n          }\n        };\n      \n\n\n    const handleEmailSet = async () => {\n        if(email != \"\"){\n            setEmailEntered(true)\n        }\n        \n    };\n\n\n    const handleEmailPhoneSet = async () => {\n        \n        try{\n            const response = await EmailPoster.post(\"/check/\", {\n                email,\n                phone\n            })\n            console.log(response.data.data)\n            if(!response.data.data.error){\n            setPhoneEntered(true)\n            console.log(\"cusID: \"+response.data.data.customer.id) \n            setCusID(response.data.data.customer.id)\n            if(response.data.data.customer.name != null){\n                setBilling(response.data.data);\n                setBillingExists(true)\n                //if billing, look up cards\n                try {\n                    const cards = await Cards.post(\"/\", {\n                        id: response.data.data.customer.id\n                    });\n                    \n                    if(cards.data.data.paymentMethods.data.length > 0){\n                        console.log(\"card form false\")\n                        setNewCardForm(false)\n                        setPaymentMethods(cards.data.data.paymentMethods.data)\n                        \n                    }\n                    else{\n                        console.log(\"card form true \")\n                        setNewCardForm(true);\n                    }\n                       \n                 } catch(err){\n                   console.log(err)\n                 }\n            }\n            }\n            else{\n                setPhoneError(true)\n            }\n           \n            \n            \n        } catch(err){\n            console.log(err)\n        }\n        \n        \n    };\n\n    const handleSetBilling = async () => {\n        console.log(name)\n        try{\n            const response = await EmailPoster.post(\"/billing/\", {\n                    id: cusID,\n                    name,\n                    address : {\n                        line1 : addressOne,\n                        line2 : addressTwo,\n                        city,\n                        state,\n                        postal_code : zip\n                    },\n                \n            })\n            \n            setBilling(response.data.data)\n            setBillingExists(true)\n            try {\n                const cards = await Cards.post(\"/\", {\n                    id: response.data.data.customer.id\n                });\n                \n                if(cards.data.data.paymentMethods.data!= null){\n                    setPaymentMethods(cards.data.data.paymentMethods.data)\n                }\n                else{\n                    setNewCardForm(true);\n                }\n                   \n             } catch(err){\n               console.log(err)\n             }\n        } catch(err){\n\n        }\n        //load saved cards\n        \n        \n    };\n\n    const editEmail = async () => {\n        setCusID(\"\")\n        setEmailEntered(false)\n        setEmail(\"\")\n        setBilling([])\n        setBillingExists(false);\n        setPaymentMethods([])\n    };\n\n    const editBilling = async () => {\n        setBillingExists(false);\n    };\n\n    const editPhone = async () => {\n        setPhoneEntered(false)\n        setPhoneRequested(false)\n    };\n\n    \n\n    const cancelEditBilling = async () => {\n        setBillingExists(true);\n    };\n\n\n    \n\n    // Hook\nfunction useLocalStorage(key, initialValue) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    });\n  \n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = value => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n    return [storedValue, setValue];\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseInt(n)) && isFinite(n);\n}\nfunction selectPM(paymentMethod){\n    setSelectedCard(paymentMethod);\n    setDisabled(false)\n}\n\nconst requestCode = async () => {\n    setPhone(phone);\n    setPhoneRequested(true)\n    setPhoneError(false)\n    \n    console.log(\"requesting code\")\n    console.log(\"phone: \"+phone)\n    //setCodeRequested(true);\n    try {\n        const verify = await StartVerify.post(\"/\", {\n            phone\n        });\n        console.log(verify)\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nconst verifyCode = async () => {\n    \n    console.log(\"verifying code: \" +otp.join(\"\"))\n   \n    //setCodeRequested(true);\n    try {\n        const verify = await CheckCode.post(\"/\", {\n            phone,\n            code: otp.join(\"\")\n        });\n        console.log(JSON.stringify(verify))\n        if(verify.data){\n            //setPhoneEntered true\n            \n            \n            handleEmailPhoneSet();\n\n        }\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n    return (\n        <>\n         \n        <div className=\"text-center\">\n            <h1>{storeName}</h1>\n            \n        </div>\n             \n        {succeeded ? \n        <div className={succeeded ? \"p-4 justify-content-center result-message\" : \"p-4 justify-content-center result-message hidden\"}>\n             \n            <div className=\"row\">\n                <p>Payment succeeded! Click below to view your order summary.</p>\n                <div className=\"mt-4 text-center\"><a href={successURL} className=\"btn btn-link p-0 m-0 d-inline align-baseline\">Back</a></div>\n            </div>\n        </div>\n            : \n               \n            <div className=\"row \">\n            <div className=\"col-sm-12\">\n              \n\n            {emailEntered ? \n            <>\n            <div className=\"card mt-4 mb-4 \">\n                <div className=\"card-body\">\n                    \n                    <div className=\"row mt-4\">\n                        <div className=\"col-sm-4\">Email</div>\n                        <div className=\"col-sm-4\"><span>{email}</span></div>\n                        <div className=\"col-sm-2 text-right\"><button className=\"btn btn-link p-0 m-0 d-inline align-baseline\"onClick={editEmail}>edit</button></div>\n                    </div> \n                    {phoneError ? \n                        <div class=\"alert alert-danger\" role=\"alert\">\n                        You entered a phone # that is different from the one you created your account with! Please request a new code with the correct #\n                        </div>\n                        : null}\n                        {phoneEntered ?  \n                        <>\n                        <div className=\"row mt-4\">\n                        <div className=\"col-sm-4\">Phone</div>\n                        <div className=\"col-sm-4\"><span>{phone}</span></div>\n                        <div className=\"col-sm-2 text-right\"><button onClick={editPhone} className=\"btn btn-link p-0 m-0 d-inline align-baseline\" >edit</button></div>\n                        </div> \n                        \n                        <div> {billingExists ? \n                        \n                            <div className=\"row mt-4\">\n                                <div className=\"col-sm-4\">Billing Address</div>\n                                <div className=\"col-sm-4\"> \n    \n                                    <div className=\"row\"><span>{billing.customer.name}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.line1}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.line2}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.city}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.state}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.zip}</span></div>\n                                </div>\n                                <div className=\"col-sm-2 text-right\"><button onClick={editBilling} className=\"btn btn-link p-0 m-0 d-inline align-baseline\" >edit</button></div>\n                                \n                            </div>\n                            \n                            :\n                            \n                             <div className=\"row mt-4\">\n                                 \n                                    <div className=\"col-sm-4\">Enter Billing Address</div>\n                                    <div className=\"col-sm-4\">\n                                        <div className=\"row mt-2\">\n                                            <input \n                                        value={name}\n                                        onChange={(e) => setName(e.target.value)} \n                                        placeholder=\"Full Name\">\n                                            </input></div>\n                                        <div className=\"row mt-2\"><input \n                                        value={addressOne}\n                                        onChange={(e) => setAddressOne(e.target.value)} \n                                        placeholder=\"Address Line 1\"></input></div>\n                                        <div className=\"row mt-2\"><input \n                                        value={addressTwo}\n                                        onChange={(e) => setAddressOne(e.target.value)} \n                                        placeholder=\"Address Line 2\"></input></div> \n                                        <div className=\"row mt-2\"><input\n                                        value={state}\n                                        onChange={(e) => setState(e.target.value)} \n                                        placeholder=\"City\"></input></div> \n                                        <div className=\"row mt-2\"><input \n                                        value={city}\n                                        onChange={(e) => setCity(e.target.value)} \n                                        placeholder=\"State\"></input></div> \n                                        <div className=\"row mt-2\"><input \n                                        value={zip}\n                                        onChange={(e) => setZip(e.target.value)} \n                                        placeholder=\"Zip\"></input></div> \n                                        <div className=\"row mt-2\"><button onClick={handleSetBilling} className=\"btn btn-primary  btn-block \">Save Address</button></div>\n                                    \n                                    </div>\n                                    <div>\n                                        {billing ? null : (billing.customer.name!=false  ?   <div className=\"col-sm-2 text-right\"><button onClick={cancelEditBilling} className=\"btn btn-link p-0 m-0 d-inline align-baseline\" >cancel</button></div>\n                                    : null) }\n                                    </div>\n                                    \n                                \n                             </div>\n                            }</div>\n                            </>\n                        : \n                        \n                                <>\n                                {phoneRequested && !phoneError? \n                                <>\n                                <div >\n                                <OTP otp={otp} setOtp={setOtp} verifyCode={verifyCode}></OTP>\n                                </div>\n                                \n                                </>\n                                \n                                :\n                                <>\n                                <div className=\"row\">\n                                    <div className=\"col\">Phone</div>\n                                    <div className=\"col\"><PhoneInput\n                                        placeholder=\"Enter phone number\"\n                                        value={phone}\n                                        onChange={setPhone}/>\n                                    </div>\n                                \n                                <div className=\"col\"><button onClick={requestCode} className=\"row btn btn-primary\" type=\"submit\">\n                                \n                                Verify Phone to retrieve saved payment data\n                                </button></div>\n                                </div>\n                                </>\n                                }\n                                \n                                \n                                </>\n                                \n                            \n                       }\n                        \n\n                        \n                    \n                        \n                    </div> \n                </div>    \n\n                    {newCardForm && billingExists ? \n                    <div className=\"card mt-4 mb-4 \">\n                        <div className=\"card-header text-center \">\n                            <h4  className=\"text-center\">Save a New Card</h4>\n                            <p>so you don't have to enter it next time!</p>\n                        </div>\n                        <div className=\"card-body\">\n                        \n                            <CardForm setError={setError} setDisabled={setDisabled} setClientSecret={setClientSecret}/>\n                        \n                        {paymentMethods.length > 0 ? <div className=\"col-sm-2\"><button onClick={() => setNewCardForm(false)} className=\"btn btn-link d-inline align-baseline\" >Back to Saved Cards</button></div> : null}\n                        </div>\n                    </div>\n                    \n                    : (billingExists && !newCardForm ? \n                \n                    <div className=\"card text-center mt-4 mb-4 \">\n                            <div className=\"card-header\">\n                                <h4  className=\"text-center\">Saved Cards</h4>\n                            </div>\n                            <div className=\"card-body \">\n                            {paymentMethods.map(paymentMethod=>{\n                                return(\n                                    <div onChange={(e) => selectPM(paymentMethod)} className=\"row \">\n                                        <div className=\"col-xs-3\"><input \n                                        type=\"radio\" \n                                        name=\"addon\" \n                                        /></div>\n                                        <div className=\"col\"><span>{paymentMethod.card.brand} - {paymentMethod.card.last4}</span></div>\n                                    </div>\n                                )\n                            })}\n                             <div className=\"row mt-2\"><button onClick={() => setNewCardForm(true)}className=\"btn btn-primary\">Add a new card</button></div>\n                            </div>\n                        </div> : null)}\n            </>\n               :\n              \n              <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Quick checkout</h5>\n                        <p>Enter your email address to log in or sign up.</p>\n                        <div className=\"\">\n                            \n                            <input \n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            placeholder=\"Email address\"\n                            type=\"text\" \n                            className=\"mt-2 mb-2 form-control\" \n                            />\n                            <button onClick={handleEmailSet} className=\"mt-2 mb-2 btn btn-primary btn-block\">Continue with TapPay</button>   \n                        </div>\n                    </div>\n                   \n                </div> \n                }\n                \n        \n                <div className=\"mt-4 text-nowrap card\">\n                    <div className=\"card-header\">\n                        <h4  className=\"text-center\">Order Details</h4>\n                    </div>\n                                <ul className=\"list-group list-group-flush\">\n                    {items.map(item=>{\n                 return(  \n                                <li className=\"list-group-item\">\n                                    <div className=\"row\">\n                                    <div className=\"col\">{item.name}</div> \n                                    <div className=\"col text-right\">${item.price/100}</div>\n                                    </div>\n                                </li>\n                    )\n             })}\n                     </ul>\n                     <div className=\"card-body\">\n                        <ul className=\"list-group list-group-flush\">\n                            <li className=\"list-group-item\">\n                                <div className=\"row\">\n                                <div className=\"col\">Subtotal</div> \n                                <div className=\"col text-right\">${subtotal/100}</div>\n                                </div>\n                            </li>\n                            <li className=\"list-group-item\">\n                                <div className=\"row\">\n                                <div className=\"col\">Shipping</div> \n                                <div className=\"col text-right\">${shipping/100}</div>\n                                </div>\n                            </li>\n                            <li className=\"list-group-item\">\n                                <div className=\"row\">\n                                <div className=\"col\">Taxes</div> \n                                <div className=\"col text-right\">${taxes/100}</div>\n                                </div>\n                            </li>\n                            <li className=\"list-group-item\">\n                                <div className=\"row\">\n                                <div className=\"col\">Total</div> \n                                <div className=\"col text-right\">${total/100}</div>\n                                </div>\n                            </li>\n                        </ul>\n                        <form id=\"payment-form\" onSubmit={paymentIntent}>\n                    <div className={succeeded ? \"p-4 row justified-content-center result-message hidden\" : \"p-4 row justified-content-center result-message\" }><button\n                        disabled={processing || disabled || succeeded}\n                        className=\"col btn btn-primary\"\n                    >\n                        <span id=\"button-text\">\n                        {processing ? (\n                            <div className=\"spinner\" id=\"spinner\"></div>\n                        ) : (\n                            \"Pay Now\"\n                        )} \n                        </span>\n                    </button></div>\n                    {/* Show any error that happens when processing the payment */}\n                    {error && (\n                        <div className=\"card-error\" role=\"alert\">\n                        {error}\n                        </div>\n                    )}\n                    \n                    </form>\n                    </div>\n                \n            </div>\n\n            <div className=\"mt-4 text-center\"><a href={returnURL} className=\"btn btn-link p-0 m-0 d-inline align-baseline\">Back</a></div>\n            </div>\n         \n          </div>\n        }\n       \n            \n        </>\n    )\n}\n\nexport default Tap;\n","import React from 'react'\nimport Tap from '../components/Tap'\n\n\nconst TapPay = () => {\n\n    return (\n        <>\n            <Tap/>\n        </>\n    )\n}\n\nexport default TapPay","import React , {useState} from 'react';\n\nimport {Switch, Route} from \"react-router-dom\";\nimport { BrowserRouter as Router, useParams } from 'react-router-dom';\nimport Tap from \"./routes/Tap\";\n\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nconst App = () => {\n\n    const [promise,setPromise] = useState(() => loadStripe(\"pk_test_51HX92ADV5bqQz6pNUHpNfJziKCFf5lOBPO6A30apaEDI0Yb0jvwOmQCcebkay4TIcs2JIsrNxQs9vN8NImlsaevO0030bqBsJQ\"));\n    \n    return (\n        \n    <div>\n        \n       \n        <div className=\"container\">\n            <Router>\n                <Switch>\n                    <Elements stripe= {promise}>\n                        <Route exact path=\"/pay/:id\" component={Tap}/>\n                    </Elements>\n                    \n                </Switch>\n                \n            </Router>\n        </div>\n        \n        \n    </div>\n    \n\n    )\n\n}\n\nexport default App;","import React, {useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from \"./App\"\n\nReactDOM.render(<App/>,document.getElementById(\"root\"));\n"],"sourceRoot":""}