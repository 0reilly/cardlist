{"version":3,"sources":["apis/OrderFinder.js","apis/EmailPoster.js","apis/Cards.js","components/CardForm.jsx","apis/PaymentIntent.js","apis/StartVerify.js","apis/CheckCode.js","components/Tap.jsx","routes/Tap.jsx","apis/NewOrder.js","components/Home.jsx","routes/Home.jsx","components/Success.jsx","routes/OnboardSuccess.jsx","apis/Onboard.js","components/Integration.jsx","routes/Integration.jsx","App.jsx","index.js"],"names":["axios","create","baseURL","CardForm","props","useState","useStripe","useElements","useHistory","useEffect","window","scrollTo","handleChange","event","a","setDisabled","empty","setError","error","message","id","options","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","onChange","Tap","Array","fill","otp","setOtp","phoneRequested","setPhoneRequested","useParams","setClientSecret","selectedCard","setSelectedCard","stripe","elements","items","setItems","acctID","setAcctId","storeName","setStoreName","successURL","setSuccessURL","returnURL","setReturnURL","subtotal","setSubtotal","shipping","setShipping","taxes","setTaxes","total","setTotal","phoneError","setPhoneError","name","setName","addressOne","setAddressOne","addressTwo","city","setCity","state","setState","zip","setZip","phone","setPhone","phoneEntered","setPhoneEntered","email","setEmail","emailEntered","setEmailEntered","newCardForm","setNewCardForm","cusID","setCusID","paymentMethods","setPaymentMethods","billing","setBilling","billingExists","setBillingExists","disabled","succeeded","setSucceeded","processing","setProcessing","OrderFinder","get","response","console","log","data","order","paid","acctid","storename","successurl","returnurl","fetchData","setPaid","post","paymentIntent","e","preventDefault","PaymentIntent","amount","customer","account","pi","JSON","stringify","handleSubmit","clientSecret","confirmCardPayment","payment_method","card","getElement","CardElement","payload","handleEmailSet","handleEmailPhoneSet","EmailPoster","Cards","cards","length","handleSetBilling","address","line1","line2","postal_code","editEmail","editBilling","editPhone","cancelEditBilling","requestCode","StartVerify","verify","verifyCode","val","CheckCode","code","className","href","onClick","class","role","value","target","placeholder","type","onComplete","values","fields","title","defaultCountry","map","paymentMethod","selectPM","brand","last4","item","price","onSubmit","TapRoute","Home","history","sampleOrder","NewOrder","location","replace","redirect","integrationRedirect","push","HomeRoute","Success","SuccessRoute","Integration","setupPayouts","Onboard","url","IntegrationRoute","App","loadStripe","promise","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"2QAGeA,MAAMC,OAAO,CAExBC,QAAS,mBCFEF,MAAMC,OAAO,CAExBC,QAAS,mBCFEF,MAAMC,OAAO,CAExBC,QAAS,kB,QC2DEC,G,MAvDC,SAACC,GAAW,IAAD,EACeC,mBAAS,IADxB,6BAEVC,sBACEC,wBACHC,cAEdC,qBAAU,WACRC,OAAOC,SAAS,EAAG,KAElB,IAIH,IAiBMC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDAInBV,EAAMW,YAAYF,EAAMG,OACxBZ,EAAMa,SAASJ,EAAMK,MAAQL,EAAMK,MAAMC,QAAU,IALhC,2CAAH,sDAkBlB,OACA,oCACI,kBAAC,cAAD,CAAaC,GAAG,eAAeC,QArCjB,CAChBC,MAAO,CACLC,KAAM,CACJC,MAAO,UACPC,WAAY,oBACZC,cAAe,cACfC,SAAU,OACV,gBAAiB,CACfH,MAAO,YAGXI,QAAS,CACPJ,MAAO,UACPK,UAAW,aAwBsCC,SAAUlB,OCxDpDZ,MAAMC,OAAO,CAExBC,QAAS,2B,gBCFEF,MAAMC,OAAO,CAExBC,QAAS,yBCFEF,MAAMC,OAAO,CAExBC,QAAS,yB,QCioBE6B,G,MAhnBH,WAAO,IAAD,EACQ1B,mBAAS,IAAI2B,MAAM,GAAGC,QAD9B,mBACPC,EADO,KACFC,EADE,OAE8B9B,oBAAS,GAFvC,mBAEP+B,EAFO,KAESC,EAFT,KAIPjB,EAAMkB,cAANlB,GAJO,EAK0Bf,qBAL1B,mBAKOkC,GALP,aAM0BlC,qBAN1B,mBAMPmC,EANO,KAMOC,EANP,KAORC,EAASpC,sBACTqC,EAAWpC,wBARH,EAWYF,mBAAS,IAXrB,mBAWPuC,EAXO,KAWAC,EAXA,OAYcxC,mBAAS,IAZvB,mBAYPyC,EAZO,KAYCC,EAZD,OAaoB1C,mBAAS,IAb7B,mBAaP2C,EAbO,KAaIC,EAbJ,OAcsB5C,mBAAS,IAd/B,mBAcP6C,EAdO,KAcKC,EAdL,OAeoB9C,mBAAS,IAf7B,mBAeP+C,EAfO,KAeIC,EAfJ,QAgBkBhD,mBAAS,GAhB3B,qBAgBPiD,GAhBO,MAgBGC,GAhBH,SAiBkBlD,mBAAS,GAjB3B,qBAiBPmD,GAjBO,MAiBGC,GAjBH,SAkBYpD,mBAAS,GAlBrB,qBAkBPqD,GAlBO,MAkBAC,GAlBA,SAmBYtD,mBAAS,GAnBrB,qBAmBPuD,GAnBO,MAmBAC,GAnBA,SAoBsBxD,oBAAS,GApB/B,qBAoBPyD,GApBO,MAoBKC,GApBL,SAwBU1D,mBAAS,IAxBnB,qBAwBP2D,GAxBO,MAwBDC,GAxBC,SAyBsB5D,mBAAS,IAzB/B,qBAyBP6D,GAzBO,MAyBKC,GAzBL,SA0BsB9D,mBAAS,IA1B/B,qBA0BP+D,GA1BO,gBA2BU/D,mBAAS,KA3BnB,qBA2BPgE,GA3BO,MA2BDC,GA3BC,SA4BYjE,mBAAS,IA5BrB,qBA4BPkE,GA5BO,MA4BAC,GA5BA,SA6BQnE,mBAAS,IA7BjB,qBA6BPoE,GA7BO,MA6BFC,GA7BE,SAgCYrE,mBAAS,IAhCrB,qBAgCPsE,GAhCO,MAgCAC,GAhCA,SAiC0BvE,oBAAS,GAjCnC,qBAiCPwE,GAjCO,MAiCOC,GAjCP,SAkCYzE,mBAAS,IAlCrB,qBAkCP0E,GAlCO,MAkCAC,GAlCA,SAmC0B3E,oBAAS,GAnCnC,qBAmCP4E,GAnCO,MAmCOC,GAnCP,SAoCwB7E,qBApCxB,qBAoCP8E,GApCO,MAoCMC,GApCN,SAwCY/E,qBAxCZ,qBAwCPgF,GAxCO,MAwCAC,GAxCA,SAyC8BjF,mBAAS,IAzCvC,qBAyCPkF,GAzCO,MAyCSC,GAzCT,SA0CgBnF,mBAAS,IA1CzB,qBA0CPoF,GA1CO,MA0CEC,GA1CF,SA2C4BrF,oBAAS,GA3CrC,qBA2CPsF,GA3CO,MA2CQC,GA3CR,SA4CkBvF,oBAAS,GA5C3B,qBA4CPwF,GA5CO,MA4CG9E,GA5CH,SA6CoBV,oBAAS,GA7C7B,qBA6CPyF,GA7CO,MA6CIC,GA7CJ,SA8CY1F,mBAAS,MA9CrB,qBA8CPa,GA9CO,MA8CAD,GA9CA,SA+CsBZ,mBAAS,IA/C/B,qBA+CP2F,GA/CO,MA+CKC,GA/CL,MAsEdxF,qBAAW,YAEQ,uCAAG,4BAAAK,EAAA,+EAISoF,EAAYC,IAAI,IAAI/E,GAJ7B,OAIRgF,EAJQ,OAKdC,QAAQC,IAAIF,EAASG,KAAKA,MAC1BR,GAAaK,EAASG,KAAKA,KAAKC,MAAM,GAAGC,MAEzC5D,EAASuD,EAASG,KAAKA,KAAK3D,OAC5BG,EAAUqD,EAASG,KAAKA,KAAKC,MAAM,GAAGE,QACtCzD,EAAamD,EAASG,KAAKA,KAAKC,MAAM,GAAGG,WACzCpD,GAAY6C,EAASG,KAAKA,KAAKC,MAAM,GAAGlD,UACxCG,GAAY2C,EAASG,KAAKA,KAAKC,MAAM,GAAGhD,UACxCG,GAASyC,EAASG,KAAKA,KAAKC,MAAM,GAAG9C,OAErCG,GAASuC,EAASG,KAAKA,KAAKC,MAAM,GAAG5C,OACrCT,EAAciD,EAASG,KAAKA,KAAKC,MAAM,GAAGI,YAC1CvD,EAAa+C,EAASG,KAAKA,KAAKC,MAAM,GAAGK,WAjB3B,kDAmBfR,QAAQC,IAAR,MAnBe,0DAAH,qDAwBhBQ,KAED,IAEF,IAAMC,GAAO,uCAAG,sBAAAjG,EAAA,+EAEeoF,EAAYc,KAAK,IAAI5F,EAAI,CAC5CqF,MAAM,IAHF,cAKRV,IAAa,GALL,gDAQRM,QAAQC,IAAIpF,IARJ,yDAAH,qDAaP+F,GAAa,uCAAG,WAAOC,GAAP,eAAApG,EAAA,6DAElBoG,EAAEC,iBACFd,QAAQC,IAAI,2BAHM,kBAKGc,EAAcJ,KAAK,IAAK,CAEjCK,OAASzD,GACT0D,SAAWjC,GACXkC,QAASzE,IATH,OAKR0E,EALQ,OAYdnB,QAAQC,IAAI,yBAAyBmB,KAAKC,UAAUF,IACpDG,GAAaH,EAAGjB,KAAKqB,cAbP,kDAgBdvB,QAAQC,IAAIpF,IAhBE,0DAAH,sDAsBTyG,GAAY,uCAAG,WAAOC,GAAP,eAAA9G,EAAA,6DACnBuF,QAAQC,IAAI,sBACZL,IAAc,GAFK,SAGGvD,EAAOmF,mBAAmBD,EAAc,CAC5DE,eAAiB3C,GAAc,CAC3B4C,KAAOpF,EAASqF,WAAWC,gBACzBzF,EAAapB,KANF,QAGb8G,EAHa,QAQPhH,OACVD,GAAS,kBAAD,OAAmBiH,EAAQhH,MAAMC,UACzC8E,IAAc,KAGdhF,GAAS,MACTgF,IAAc,GACdF,IAAa,GACbgB,MAhBiB,2CAAH,sDAuBhBoB,GAAc,uCAAG,sBAAArH,EAAA,sDACP,IAATiE,IACCG,IAAgB,GAFD,2CAAH,qDAQdkD,GAAmB,uCAAG,8BAAAtH,EAAA,+EAGGuH,EAAYrB,KAAK,UAAW,CAC/CjC,SACAJ,WALgB,WAGdyB,EAHc,QAQPG,KAAKA,KAAKrF,MARH,oBASpBoE,GAASc,EAASG,KAAKA,KAAKe,SAASlG,IACrCsE,GAAWU,EAASG,KAAKA,MACkB,MAApCH,EAASG,KAAKA,KAAKe,SAAStD,KAXf,2CAcYsE,EAAMtB,KAAK,IAAK,CAChC5F,GAAIgF,EAASG,KAAKA,KAAKe,SAASlG,KAf5B,SAcFmH,EAdE,QAkBChC,KAAKA,KAAKhB,eAAegB,KAAKiC,OAAS,GAC5CnC,QAAQC,IAAI,mBACZlB,IAAe,GACfI,GAAkB+C,EAAMhC,KAAKA,KAAKhB,eAAegB,QAIjDF,QAAQC,IAAI,mBACZlB,IAAe,IA1BX,kDA8BZiB,QAAQC,IAAR,MA9BY,QAkCZV,IAAiB,GAlCL,QAoCpBd,IAAgB,GApCI,wBAuChBf,IAAc,GAvCE,0DA0CpBsC,QAAQC,IAAR,MA1CoB,iEAAH,qDAgDnBmC,GAAgB,uCAAG,8BAAA3H,EAAA,6DACrBuF,QAAQC,IAAItC,IADS,kBAGMqE,EAAYrB,KAAK,YAAa,CAC7C5F,GAAIiE,GACJrB,QACA0E,QAAU,CACNC,MAAQzE,GACR0E,MAAQxE,GACRC,QACAE,SACAsE,YAAcpE,MAXT,cAGX2B,EAHW,OAgBjBV,GAAWU,EAASG,KAAKA,MACzBX,IAAiB,GAjBA,mBAmBO0C,EAAMtB,KAAK,IAAK,CAChC5F,GAAIgF,EAASG,KAAKA,KAAKe,SAASlG,KApBvB,QAuB4B,OAJnCmH,EAnBO,QAuBJhC,KAAKA,KAAKhB,eAAegB,KAC9Bf,GAAkB+C,EAAMhC,KAAKA,KAAKhB,eAAegB,MAGjDnB,IAAe,GA3BN,kDA+BdiB,QAAQC,IAAR,MA/Bc,2HAAH,qDAyChBwC,GAAS,uCAAG,sBAAAhI,EAAA,sDACdwE,GAAS,IACTJ,IAAgB,GAChBF,GAAS,IACTU,GAAW,IACXE,IAAiB,GACjBJ,GAAkB,IANJ,2CAAH,qDASTuD,GAAW,uCAAG,sBAAAjI,EAAA,sDAChB8E,IAAiB,GADD,2CAAH,qDAIXoD,GAAS,uCAAG,sBAAAlI,EAAA,sDACdgE,IAAgB,GAChBzC,GAAkB,GAFJ,2CAAH,qDAMT4G,GAAiB,uCAAG,sBAAAnI,EAAA,sDACtB8E,IAAiB,GADK,2CAAH,qDAY3B,IAAMsD,GAAW,uCAAG,4BAAApI,EAAA,6DAChB8D,GAASD,IACTtC,GAAkB,GAClB0B,IAAc,GAEdsC,QAAQC,IAAI,mBACZD,QAAQC,IAAI,UAAU3B,IANN,kBASSwE,EAAYnC,KAAK,IAAK,CACvCrC,WAVQ,OASNyE,EATM,OAYZ/C,QAAQC,IAAI8C,GAZA,kDAcZ/C,QAAQC,IAAR,MAdY,0DAAH,qDAkBX+C,GAAU,uCAAG,WAAOC,GAAP,eAAAxI,EAAA,6DAEfuF,QAAQC,IAAI,SAAUgD,GAFP,kBAMUC,EAAUvC,KAAK,IAAK,CACrCrC,SACA6E,KAAMF,IARC,OAMLF,EANK,OAUX/C,QAAQC,IAAImB,KAAKC,UAAU0B,IACxBA,EAAO7C,MAIN6B,KAfO,gDAmBX/B,QAAQC,IAAR,MAnBW,yDAAH,sDAuBZ,OACI,oCAEA,yBAAKmD,UAAU,eACX,4BAAKzG,IAIR8C,GACD,yBAAK2D,UAAW3D,GAAY,4CAA8C,oDAEtE,yBAAK2D,UAAU,OACX,yFACA,yBAAKA,UAAU,oBAAmB,uBAAGC,KAAMxG,EAAYuG,UAAU,gDAA/B,WAKtC,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aAGdxE,GACD,oCACA,yBAAKwE,UAAU,mBACX,yBAAKA,UAAU,aAEX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YAAf,SACA,yBAAKA,UAAU,YAAW,8BAAO1E,KACjC,yBAAK0E,UAAU,uBAAsB,4BAAQA,UAAU,+CAA8CE,QAASb,IAAzE,UAExChF,GACG,yBAAK8F,MAAM,qBAAqBC,KAAK,SAArC,oIAGE,KACDhF,GACD,oCACA,yBAAK4E,UAAU,YACf,yBAAKA,UAAU,YAAf,SACA,yBAAKA,UAAU,YAAW,8BAAO9E,KACjC,yBAAK8E,UAAU,uBAAsB,4BAAQE,QAASX,GAAWS,UAAU,gDAAtC,UAGrC,iCAAO9D,GAEH,yBAAK8D,UAAU,YACX,yBAAKA,UAAU,YAAf,mBACA,yBAAKA,UAAU,YAEX,yBAAKA,UAAU,OAAM,8BAAOhE,GAAQ6B,SAAStD,OAC7C,yBAAKyF,UAAU,OAAM,8BAAOhE,GAAQ6B,SAASoB,QAAQC,QACrD,yBAAKc,UAAU,OAAM,8BAAOhE,GAAQ6B,SAASoB,QAAQE,QACrD,yBAAKa,UAAU,OAAM,8BAAOhE,GAAQ6B,SAASoB,QAAQrE,OACrD,yBAAKoF,UAAU,OAAM,8BAAOhE,GAAQ6B,SAASoB,QAAQnE,QACrD,yBAAKkF,UAAU,OAAM,8BAAOhE,GAAQ6B,SAASoB,QAAQjE,OAEzD,yBAAKgF,UAAU,uBAAsB,4BAAQE,QAASZ,GAAaU,UAAU,gDAAxC,UAMxC,yBAAKA,UAAU,YAER,yBAAKA,UAAU,YAAf,yBACA,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YACX,2BACJK,MAAO9F,GACPlC,SAAU,SAACoF,GAAD,OAAOjD,GAAQiD,EAAE6C,OAAOD,QAClCE,YAAY,eAEZ,yBAAKP,UAAU,YAAW,2BAC1BK,MAAO5F,GACPpC,SAAU,SAACoF,GAAD,OAAO/C,GAAc+C,EAAE6C,OAAOD,QACxCE,YAAY,oBACZ,yBAAKP,UAAU,YAAW,2BAC1BK,MAAO1F,GACPtC,SAAU,SAACoF,GAAD,OAAO/C,GAAc+C,EAAE6C,OAAOD,QACxCE,YAAY,oBACZ,yBAAKP,UAAU,YAAW,2BAC1BK,MAAOvF,GACPzC,SAAU,SAACoF,GAAD,OAAO1C,GAAS0C,EAAE6C,OAAOD,QACnCE,YAAY,UACZ,yBAAKP,UAAU,YAAW,2BAC1BK,MAAOzF,GACPvC,SAAU,SAACoF,GAAD,OAAO5C,GAAQ4C,EAAE6C,OAAOD,QAClCE,YAAY,WACZ,yBAAKP,UAAU,YAAW,2BAC1BK,MAAOrF,GACP3C,SAAU,SAACoF,GAAD,OAAOxC,GAAOwC,EAAE6C,OAAOD,QACjCE,YAAY,SACZ,yBAAKP,UAAU,YAAW,4BAAQE,QAASlB,GAAkBgB,UAAU,+BAA7C,kBAG9B,6BACKhE,GAAU,KAA+B,GAAvBA,GAAQ6B,SAAStD,KAAiB,yBAAKyF,UAAU,uBAAsB,4BAAQE,QAASV,GAAmBQ,UAAU,gDAA9C,WAC5F,SASN,oCACCrH,IAAmB0B,GACpB,oCACA,yBAAK2F,UAAU,eACf,kBAAC,IAAD,CACAQ,KAAK,SACLC,WAAY,SAACZ,GAAD,OAASD,GAAWC,IAChCxH,SAAU,SAACwH,GAAD,OAASnH,EAAOmH,IAC1Ba,OAAQjI,EACRkI,OAAQ,EACRC,MAAM,8BAON,oCACA,yBAAKZ,UAAU,OACX,yBAAKA,UAAU,OAAf,SACA,yBAAKA,UAAU,OAAM,kBAAC,IAAD,CACjBO,YAAY,qBACZF,MAAOnF,GACP7C,SAAU8C,GACV0F,eAAe,QAIvB,yBAAKb,UAAU,OAAM,4BAAQE,QAAST,GAAaO,UAAU,sBAAsBQ,KAAK,UAAnE,qDAqBhC9E,IAAeQ,GAChB,yBAAK8D,UAAU,mBACX,yBAAKA,UAAU,4BACX,wBAAKA,UAAU,eAAf,mBACA,wEAEJ,yBAAKA,UAAU,aAEX,kBAAC,EAAD,CAAUxI,SAAUA,GAAUF,YAAaA,GAAawB,gBAAiBA,IAE5EgD,GAAeiD,OAAS,EAAI,yBAAKiB,UAAU,YAAW,4BAAQE,QAAS,kBAAMvE,IAAe,IAAQqE,UAAU,wCAAxD,wBAAqI,OAI7L9D,KAAkBR,GAErB,yBAAKsE,UAAU,+BACP,yBAAKA,UAAU,eACX,wBAAKA,UAAU,eAAf,gBAEJ,yBAAKA,UAAU,cACdlE,GAAegF,KAAI,SAAAC,GAChB,OACI,yBAAK1I,SAAU,SAACoF,GAAD,OAlOnD,SAAkBsD,GACd/H,EAAgB+H,GAChBzJ,IAAY,GAgO0C0J,CAASD,IAAgBf,UAAU,QACrD,yBAAKA,UAAU,YAAW,2BAC1BQ,KAAK,QACLjG,KAAK,WAEL,yBAAKyF,UAAU,OAAM,8BAAOe,EAAczC,KAAK2C,MAA1B,MAAoCF,EAAczC,KAAK4C,YAIvF,yBAAKlB,UAAU,YAAW,4BAAQE,QAAS,kBAAMvE,IAAe,IAAMqE,UAAU,mBAAtD,qBAEtB,MAInB,yBAAKA,UAAU,QACT,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,kBACA,6EACA,yBAAKA,UAAU,IAEX,2BACAK,MAAO/E,GACPjD,SAAU,SAACoF,GAAD,OAAOlC,GAASkC,EAAE6C,OAAOD,QACnCE,YAAY,gBACZC,KAAK,OACLR,UAAU,2BAEV,4BAAQE,QAASxB,GAAgBsB,UAAU,uCAA3C,2BAQZ,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,eACX,wBAAKA,UAAU,eAAf,kBAEQ,wBAAIA,UAAU,+BACzB7G,EAAM2H,KAAI,SAAAK,GACd,OACe,wBAAInB,UAAU,mBACV,yBAAKA,UAAU,OACf,yBAAKA,UAAU,OAAOmB,EAAK5G,MAC3B,yBAAKyF,UAAU,kBAAf,IAAkCmB,EAAKC,MAAM,WAM5D,yBAAKpB,UAAU,aACZ,wBAAIA,UAAU,+BACV,wBAAIA,UAAU,mBACV,yBAAKA,UAAU,OACf,yBAAKA,UAAU,OAAf,YACA,yBAAKA,UAAU,kBAAf,IAAkCnG,GAAS,OAGpC,GAAVE,GAAc,wBAAIiG,UAAU,mBACzB,yBAAKA,UAAU,OACf,yBAAKA,UAAU,OAAf,YACA,yBAAKA,UAAU,kBAAf,IAAkCjG,GAAS,OAEvC,KAET,wBAAIiG,UAAU,mBACT,yBAAKA,UAAU,OACf,yBAAKA,UAAU,OAAf,SACA,yBAAKA,UAAU,kBAAf,IAAkC/F,GAAM,OAI5C,wBAAI+F,UAAU,mBACV,yBAAKA,UAAU,OACf,yBAAKA,UAAU,OAAf,SACA,yBAAKA,UAAU,kBAAf,IAAkC7F,GAAM,QAIhD,0BAAMxC,GAAG,eAAe0J,SAAU7D,IACtC,yBAAKwC,UAAW3D,GAAY,yDAA2D,mDAAoD,4BACvID,SAAUG,IAAcH,IAAYC,GACpC2D,UAAU,uBAEV,0BAAMrI,GAAG,eACR4E,GACG,yBAAKyD,UAAU,UAAUrI,GAAG,YAE5B,aAKPF,IACG,yBAAKuI,UAAU,aAAaI,KAAK,SAChC3I,OASb,yBAAKuI,UAAU,oBAAmB,uBAAGC,KAAMtG,EAAWqG,UAAU,gDAA9B,cC9mB/BsB,EATE,WAEb,OACI,oCACI,kBAAC,EAAD,QCLG/K,MAAMC,OAAO,CAExBC,QAAS,eCsEE8K,EAtEF,WACT,IAAIC,EAAUzK,cAER0K,EAAW,uCAAG,4BAAApK,EAAA,6DAChBuF,QAAQC,IAAI,qDADI,kBAGO6E,EAASnE,KAAK,IAAK,CAClCpE,MAAQ,CAEJ,CACIoB,KAAM,2BACN6G,MAAQ,MAGhBvH,SAAU,IACVE,SAAU,EACVE,MAAO,EACPE,MAAO,IACP+C,UAAW,mCACX7D,OAAQ,wBACRM,UAAY,0BACZF,WAAa,4BAlBL,OAGVkD,EAHU,OAoBhBC,QAAQC,IAAIF,GACZ1F,OAAO0K,SAASC,QAAQjF,EAASG,KAAKA,KAAK+E,UArB3B,gDAwBhBjF,QAAQC,IAAR,MAxBgB,yDAAH,qDA8BXiF,EAAmB,uCAAG,sBAAAzK,EAAA,sDACxBmK,EAAQO,KAAK,gBADW,2CAAH,qDAKzB,OACI,oCACI,yBAAK/B,UAAU,oBACX,qDACA,gIACA,gGACA,6BACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,SACX,4BAASE,QAASuB,EAAazB,UAAU,8BAAzC,cACA,0DAEJ,yBAAKA,UAAU,SACX,4BAASE,QAAS4B,EAAqB9B,UAAU,8BAAjD,cAGR,yBAAKG,MAAM,8BACP,wPAMZ,gCCtDG6B,EATG,WAEd,OACI,oCACI,kBAAC,EAAD,QCSGC,EAfC,WAAO,IACZtK,EAAMkB,cAANlB,GACP,OACI,oCACI,8EACA,6CAAmBA,GACnB,uJACQ,uBAAGsI,KAAM,iEAAkED,UAAU,gDAArF,sBAER,sKACA,8KACA,2FCDGkC,EATM,WAEjB,OACI,oCACI,kBAAC,EAAD,QCJG3L,MAAMC,OAAO,CAExBC,QAAS,kBCgDE0L,EAhDK,WAEhB,IAAIX,EAAUzK,cAKRqL,EAAY,uCAAG,4BAAA/K,EAAA,6DACjBuF,QAAQC,IAAI,qBADK,SAEMwF,EAAQ9E,KAAK,IAAK,IAFxB,QAEXZ,EAFW,QAGJG,KAAKwF,MACdrL,OAAO0K,SAAWhF,EAASG,KAAKwF,KAJnB,2CAAH,qDAOlB,OACI,oCACQ,yBAAKtC,UAAU,yBACX,yBAAKG,MAAM,YACP,yBAAKA,MAAM,UACX,yBAAKA,MAAM,SAAQ,wBAAIH,UAAU,IAAd,yBACnB,yBAAKG,MAAM,SAAQ,4BAAQD,QAAS,SAACzC,GAhBrD+D,EAAQO,KAAR,MAgByE/B,UAAU,oBAAhD,UAGvB,yBAAKG,MAAM,QACP,6BACA,qCAAU,qCAAV,oEAEA,yHAEA,4BAASD,QAASkC,EAAcpC,UAAU,8BAA1C,2BACA,6BACA,6BACA,mJACA,uBAAGC,KAAM,iEAAkED,UAAU,gDAArF,sBACA,6BACA,6BACA,uQAIZ,gCChCGuC,EATU,WAErB,OACI,oCACI,kBAAC,EAAD,Q,gBCiCGC,EA9BH,WAAO,IAAD,EAEe5L,oBAAS,kBAAM6L,YAAW,kHAFzC,mBAEPC,EAFO,UAId,OAEA,oCACI,yBAAK1C,UAAU,aACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAU/G,OAASyJ,GACf,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWvK,IACxC,kBAAC,IAAD,CAAOqK,OAAK,EAACC,KAAK,eAAeC,UAAWV,IAC5C,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,eAAeC,UAAWZ,UCpBpEa,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,W","file":"static/js/main.3ac30970.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"/api/v1/orders\"\n});","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"/api/v1/emails\"\n});","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"/api/v1/cards\"\n});","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\"\nimport \"./App.css\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\n\nconst CardForm= (props) => {\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  let history = useHistory(); \n  \n  useEffect(() => {\n    window.scrollTo(0, 0);\n    // Create PaymentIntent as soon as the page loads\n  }, []);\n\n\n  \n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const handleChange = async (event) => {\n\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    props.setDisabled(event.empty);\n    props.setError(event.error ? event.error.message : \"\");\n  };\n\n\n\n  \n\n  const goHome = () => {\n    history.push(\"/\");\n  }\n  const handleForm = () => {\n    props.form();\n  }\n  return (\n  <>\n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n    </>\n  );\n}\n\nexport default CardForm","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"/create-payment-intent\"\n});","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"/start-twilio-verify\"\n});","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"/check-twilio-verify\"\n});","import React , {Component, useEffect, useState} from 'react';\nimport { useParams} from \"react-router-dom\";\nimport OrderFinder from '../apis/OrderFinder';\nimport EmailPoster from '../apis/EmailPoster';\nimport Cards from '../apis/Cards';\nimport {\n    CardElement,\n    useStripe,\n    useElements\n  } from \"@stripe/react-stripe-js\";\nimport CardForm from './CardForm';\nimport PaymentIntent from '../apis/PaymentIntent';\nimport 'react-phone-number-input/style.css'\nimport PhoneInput from 'react-phone-number-input'\nimport StartVerify from '../apis/StartVerify';\nimport CheckCode from '../apis/CheckCode';\nimport ReactCodeInput from 'react-verification-code-input';\nimport OTP from \"./OTP\";\n\n\n\n\nconst Tap = () => {\n    const [otp, setOtp] = useState(new Array(6).fill());\n    const [phoneRequested, setPhoneRequested] = useState(false);\n\n    const {id} = useParams();\n    const [clientSecret, setClientSecret] = useState();\n    const [selectedCard, setSelectedCard] = useState();\n    const stripe = useStripe();\n    const elements = useElements();\n    \n    //from server response\n    const [items, setItems] = useState([]);\n    const [acctID, setAcctId] = useState(\"\");\n    const [storeName, setStoreName] = useState(\"\");\n    const [successURL, setSuccessURL] = useState(\"\");\n    const [returnURL, setReturnURL] = useState(\"\");\n    const [subtotal, setSubtotal] = useState(0);\n    const [shipping, setShipping] = useState(0);\n    const [taxes, setTaxes] = useState(0);\n    const [total, setTotal] = useState(0);\n    const [phoneError, setPhoneError] = useState(false);\n    \n    \n    //billing fields\n    const [name, setName] = useState(\"\");\n    const [addressOne, setAddressOne] = useState(\"\");\n    const [addressTwo, setAddressTwo] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [state, setState] = useState(\"\");\n    const [zip, setZip] = useState(\"\");\n\n    //from customer\n    const [phone, setPhone] = useState(\"\");\n    const [phoneEntered, setPhoneEntered] = useState(false);\n    const [email, setEmail] = useState(\"\");\n    const [emailEntered, setEmailEntered] = useState(false);\n    const [newCardForm, setNewCardForm] = useState();\n   \n\n    //from stripe\n    const [cusID, setCusID] = useState();\n    const [paymentMethods, setPaymentMethods] = useState([]);\n    const [billing, setBilling] = useState({});\n    const [billingExists, setBillingExists] = useState(false);\n    const [disabled, setDisabled] = useState(true);\n    const [succeeded, setSucceeded] = useState(false);\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState('');\n    \n    \n\n\n    const cardStyle = {\n        style: {\n          base: {\n            color: \"#32325d\",\n            fontFamily: 'Arial, sans-serif',\n            fontSmoothing: \"antialiased\",\n            fontSize: \"16px\",\n            \"::placeholder\": {\n              color: \"#32325d\"\n            }\n          },\n          invalid: {\n            color: \"#fa755a\",\n            iconColor: \"#fa755a\"\n          }\n        }\n      };\n\n    useEffect( () => {\n        \n        const fetchData = async () => {\n        \n        \n        try {\n            const response = await OrderFinder.get(\"/\"+id);\n            console.log(response.data.data);\n            setSucceeded(response.data.data.order[0].paid);\n            \n            setItems(response.data.data.items)\n            setAcctId(response.data.data.order[0].acctid);\n            setStoreName(response.data.data.order[0].storename);\n            setSubtotal(response.data.data.order[0].subtotal);\n            setShipping(response.data.data.order[0].shipping);\n            setTaxes(response.data.data.order[0].taxes);\n            \n            setTotal(response.data.data.order[0].total);\n            setSuccessURL(response.data.data.order[0].successurl);\n            setReturnURL(response.data.data.order[0].returnurl);\n         } catch(err){\n           console.log(err)\n         }\n            \n        \n       }\n       fetchData();\n\n    },[]);\n\n    const setPaid = async () => {\n        try {\n            const response = await OrderFinder.post(\"/\"+id, {\n                paid: true\n            });\n            setSucceeded(true);\n        }\n        catch (err){\n            console.log(error)\n        }\n    }\n        \n\n    const paymentIntent = async (e) => {\n  \n        e.preventDefault();\n        console.log(\"creating payment intent\")\n        try {\n            const pi = await PaymentIntent.post(\"/\", {\n                \n                    amount : total,\n                    customer : cusID,\n                    account: acctID,\n                \n            });\n            console.log(\"payment intent created\"+JSON.stringify(pi))\n            handleSubmit(pi.data.clientSecret);\n        }\n        catch (err){\n            console.log(error)\n        }\n              \n           \n      }\n      \n        const handleSubmit = async (clientSecret) => {\n          console.log(\"confirming payment\")\n          setProcessing(true);\n          const payload = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: (newCardForm ? {\n                card : elements.getElement(CardElement) \n              } : selectedCard.id) \n          });\n          if (payload.error) {\n            setError(`Payment failed ${payload.error.message}`);\n            setProcessing(false);\n          } else {\n              \n            setError(null);\n            setProcessing(false);\n            setSucceeded(true);\n            setPaid();\n           \n          }\n        };\n      \n\n\n    const handleEmailSet = async () => {\n        if(email != \"\"){\n            setEmailEntered(true)\n        }\n        \n    };\n\n\n    const handleEmailPhoneSet = async () => {\n        \n        try{\n            const response = await EmailPoster.post(\"/check/\", {\n                email,\n                phone\n            })\n            \n            if(!response.data.data.error){\n            setCusID(response.data.data.customer.id)\n            setBilling(response.data.data);\n                if(response.data.data.customer.name != null){\n                    //if billing, look up cards\n                    try {\n                        const cards = await Cards.post(\"/\", {\n                            id: response.data.data.customer.id\n                        });\n                        \n                        if(cards.data.data.paymentMethods.data.length > 0){\n                            console.log(\"card form false\")\n                            setNewCardForm(false)\n                            setPaymentMethods(cards.data.data.paymentMethods.data)\n                            \n                        }\n                        else{\n                            console.log(\"card form true \")\n                            setNewCardForm(true);\n                        }\n                        \n                    } catch(err){\n                    console.log(err)\n                    }\n\n                    \n                    setBillingExists(true)\n                }\n            setPhoneEntered(true)\n            }\n            else{\n                setPhoneError(true)\n            }\n        } catch(err){\n            console.log(err)\n        }\n        \n        \n    };\n\n    const handleSetBilling = async () => {\n        console.log(name)\n        try{\n            const response = await EmailPoster.post(\"/billing/\", {\n                    id: cusID,\n                    name,\n                    address : {\n                        line1 : addressOne,\n                        line2 : addressTwo,\n                        city,\n                        state,\n                        postal_code : zip\n                    },\n                \n            })\n            \n            setBilling(response.data.data)\n            setBillingExists(true)\n            try {\n                const cards = await Cards.post(\"/\", {\n                    id: response.data.data.customer.id\n                });\n                \n                if(cards.data.data.paymentMethods.data!= null){\n                    setPaymentMethods(cards.data.data.paymentMethods.data)\n                }\n                else{\n                    setNewCardForm(true);\n                }\n                   \n             } catch(err){\n               console.log(err)\n             }\n        } catch(err){\n\n        }\n        //load saved cards\n        \n        \n    };\n\n    const editEmail = async () => {\n        setCusID(\"\")\n        setEmailEntered(false)\n        setEmail(\"\")\n        setBilling([])\n        setBillingExists(false);\n        setPaymentMethods([])\n    };\n\n    const editBilling = async () => {\n        setBillingExists(false);\n    };\n\n    const editPhone = async () => {\n        setPhoneEntered(false)\n        setPhoneRequested(false)\n    };\n\n\n    const cancelEditBilling = async () => {\n        setBillingExists(true);\n    };\n\n  function isNumeric(n) {\n    return !isNaN(parseInt(n)) && isFinite(n);\n}\nfunction selectPM(paymentMethod){\n    setSelectedCard(paymentMethod);\n    setDisabled(false)\n}\n\nconst requestCode = async () => {\n    setPhone(phone);\n    setPhoneRequested(true)\n    setPhoneError(false)\n    \n    console.log(\"requesting code\")\n    console.log(\"phone: \"+phone)\n    //setCodeRequested(true);\n    try {\n        const verify = await StartVerify.post(\"/\", {\n            phone\n        });\n        console.log(verify)\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nconst verifyCode = async (val) => {\n    \n    console.log(\"code: \" +val)\n   \n    //setCodeRequested(true);\n    try {\n        const verify = await CheckCode.post(\"/\", {\n            phone,\n            code: val\n        });\n        console.log(JSON.stringify(verify))\n        if(verify.data){\n            //setPhoneEntered true\n            \n            \n            handleEmailPhoneSet();\n\n        }\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n    return (\n        <>\n         \n        <div className=\"text-center\">\n            <h1>{storeName}</h1>\n            \n        </div>\n             \n        {succeeded ? \n        <div className={succeeded ? \"p-4 justify-content-center result-message\" : \"p-4 justify-content-center result-message hidden\"}>\n             \n            <div className=\"row\">\n                <p>Payment succeeded! Click below to view your order summary.</p>\n                <div className=\"mt-4 text-center\"><a href={successURL} className=\"btn btn-link p-0 m-0 d-inline align-baseline\">Back</a></div>\n            </div>\n        </div>\n            : \n               \n            <div className=\"row \">\n            <div className=\"col-sm-12\">\n              \n\n            {emailEntered ? \n            <>\n            <div className=\"card mt-4 mb-4 \">\n                <div className=\"card-body\">\n                    \n                    <div className=\"row mt-4\">\n                        <div className=\"col-sm-4\">Email</div>\n                        <div className=\"col-sm-4\"><span>{email}</span></div>\n                        <div className=\"col-sm-2 text-right\"><button className=\"btn btn-link p-0 m-0 d-inline align-baseline\"onClick={editEmail}>edit</button></div>\n                    </div> \n                    {phoneError ? \n                        <div class=\"alert alert-danger\" role=\"alert\">\n                        You entered a phone # that is different from the one you created your account with! Please request a new code with the correct #\n                        </div>\n                        : null}\n                        {phoneEntered ?  \n                        <>\n                        <div className=\"row mt-4\">\n                        <div className=\"col-sm-4\">Phone</div>\n                        <div className=\"col-sm-4\"><span>{phone}</span></div>\n                        <div className=\"col-sm-2 text-right\"><button onClick={editPhone} className=\"btn btn-link p-0 m-0 d-inline align-baseline\" >edit</button></div>\n                        </div> \n                        \n                        <div> {billingExists ? \n                        \n                            <div className=\"row mt-4\">\n                                <div className=\"col-sm-4\">Billing Address</div>\n                                <div className=\"col-sm-4\"> \n    \n                                    <div className=\"row\"><span>{billing.customer.name}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.line1}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.line2}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.city}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.state}</span></div>\n                                    <div className=\"row\"><span>{billing.customer.address.zip}</span></div>\n                                </div>\n                                <div className=\"col-sm-2 text-right\"><button onClick={editBilling} className=\"btn btn-link p-0 m-0 d-inline align-baseline\" >edit</button></div>\n                                \n                            </div>\n                            \n                            :\n                            \n                             <div className=\"row mt-4\">\n                                 \n                                    <div className=\"col-sm-4\">Enter Billing Address</div>\n                                    <div className=\"col-sm-4\">\n                                        <div className=\"row mt-2\">\n                                            <input \n                                        value={name}\n                                        onChange={(e) => setName(e.target.value)} \n                                        placeholder=\"Full Name\">\n                                            </input></div>\n                                        <div className=\"row mt-2\"><input \n                                        value={addressOne}\n                                        onChange={(e) => setAddressOne(e.target.value)} \n                                        placeholder=\"Address Line 1\"></input></div>\n                                        <div className=\"row mt-2\"><input \n                                        value={addressTwo}\n                                        onChange={(e) => setAddressOne(e.target.value)} \n                                        placeholder=\"Address Line 2\"></input></div> \n                                        <div className=\"row mt-2\"><input\n                                        value={state}\n                                        onChange={(e) => setState(e.target.value)} \n                                        placeholder=\"City\"></input></div> \n                                        <div className=\"row mt-2\"><input \n                                        value={city}\n                                        onChange={(e) => setCity(e.target.value)} \n                                        placeholder=\"State\"></input></div> \n                                        <div className=\"row mt-2\"><input \n                                        value={zip}\n                                        onChange={(e) => setZip(e.target.value)} \n                                        placeholder=\"Zip\"></input></div> \n                                        <div className=\"row mt-2\"><button onClick={handleSetBilling} className=\"btn btn-primary  btn-block \">Save Address</button></div>\n                                    \n                                    </div>\n                                    <div>\n                                        {billing ? null : (billing.customer.name!=false  ?   <div className=\"col-sm-2 text-right\"><button onClick={cancelEditBilling} className=\"btn btn-link p-0 m-0 d-inline align-baseline\" >cancel</button></div>\n                                    : null) }\n                                    </div>\n                                    \n                                \n                             </div>\n                            }</div>\n                            </>\n                        : \n                        \n                                <>\n                                {phoneRequested && !phoneError? \n                                <>\n                                <div className=\"text-center\" >\n                                <ReactCodeInput \n                                type=\"number\"\n                                onComplete={(val) => verifyCode(val)}\n                                onChange={(val) => setOtp(val)}\n                                values={otp}\n                                fields={6}\n                                title=\"Enter Verification Code\"\n                                />\n                                </div>\n                                \n                                </>\n                                \n                                :\n                                <>\n                                <div className=\"row\">\n                                    <div className=\"col\">Phone</div>\n                                    <div className=\"col\"><PhoneInput\n                                        placeholder=\"Enter phone number\"\n                                        value={phone}\n                                        onChange={setPhone}\n                                        defaultCountry=\"US\"\n                                        />\n                                    </div>\n                                \n                                <div className=\"col\"><button onClick={requestCode} className=\"row btn btn-primary\" type=\"submit\">\n                                \n                                Verify Phone to retrieve saved payment data\n                                </button></div>\n                                </div>\n                                </>\n                                }\n                                \n                                \n                                </>\n                                \n                            \n                       }\n                        \n\n                        \n                    \n                        \n                    </div> \n                </div>    \n\n                    {newCardForm && billingExists ? \n                    <div className=\"card mt-4 mb-4 \">\n                        <div className=\"card-header text-center \">\n                            <h4  className=\"text-center\">Save a New Card</h4>\n                            <p>so you don't have to enter it next time!</p>\n                        </div>\n                        <div className=\"card-body\">\n                        \n                            <CardForm setError={setError} setDisabled={setDisabled} setClientSecret={setClientSecret}/>\n                        \n                        {paymentMethods.length > 0 ? <div className=\"col-sm-2\"><button onClick={() => setNewCardForm(false)} className=\"btn btn-link d-inline align-baseline\" >Back to Saved Cards</button></div> : null}\n                        </div>\n                    </div>\n                    \n                    : (billingExists && !newCardForm ? \n                \n                    <div className=\"card text-center mt-4 mb-4 \">\n                            <div className=\"card-header\">\n                                <h4  className=\"text-center\">Saved Cards</h4>\n                            </div>\n                            <div className=\"card-body \">\n                            {paymentMethods.map(paymentMethod=>{\n                                return(\n                                    <div onChange={(e) => selectPM(paymentMethod)} className=\"row \">\n                                        <div className=\"col-xs-3\"><input \n                                        type=\"radio\" \n                                        name=\"addon\" \n                                        /></div>\n                                        <div className=\"col\"><span>{paymentMethod.card.brand} - {paymentMethod.card.last4}</span></div>\n                                    </div>\n                                )\n                            })}\n                             <div className=\"row mt-2\"><button onClick={() => setNewCardForm(true)}className=\"btn btn-primary\">Add a new card</button></div>\n                            </div>\n                        </div> : null)}\n            </>\n               :\n              \n              <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Quick checkout</h5>\n                        <p>Enter your email address to log in or sign up.</p>\n                        <div className=\"\">\n                            \n                            <input \n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            placeholder=\"Email address\"\n                            type=\"text\" \n                            className=\"mt-2 mb-2 form-control\" \n                            />\n                            <button onClick={handleEmailSet} className=\"mt-2 mb-2 btn btn-primary btn-block\">Continue with TapPay</button>   \n                        </div>\n                    </div>\n                   \n                </div> \n                }\n                \n        \n                <div className=\"mt-4 text-nowrap card\">\n                    <div className=\"card-header\">\n                        <h4  className=\"text-center\">Order Details</h4>\n                    </div>\n                                <ul className=\"list-group list-group-flush\">\n                    {items.map(item=>{\n                 return(  \n                                <li className=\"list-group-item\">\n                                    <div className=\"row\">\n                                    <div className=\"col\">{item.name}</div> \n                                    <div className=\"col text-right\">${item.price/100}</div>\n                                    </div>\n                                </li>\n                    )\n             })}\n                     </ul>\n                     <div className=\"card-body\">\n                        <ul className=\"list-group list-group-flush\">\n                            <li className=\"list-group-item\">\n                                <div className=\"row\">\n                                <div className=\"col\">Subtotal</div> \n                                <div className=\"col text-right\">${subtotal/100}</div>\n                                </div>\n                            </li>\n                            {shipping!=0 ? <li className=\"list-group-item\">\n                                <div className=\"row\">\n                                <div className=\"col\">Shipping</div> \n                                <div className=\"col text-right\">${shipping/100}</div>\n                                </div>\n                            </li> : null}\n                            \n                           <li className=\"list-group-item\">\n                                <div className=\"row\">\n                                <div className=\"col\">Taxes</div> \n                                <div className=\"col text-right\">${taxes/100}</div>\n                                </div>\n                            </li>\n                            \n                            <li className=\"list-group-item\">\n                                <div className=\"row\">\n                                <div className=\"col\">Total</div> \n                                <div className=\"col text-right\">${total/100}</div>\n                                </div>\n                            </li>\n                        </ul>\n                        <form id=\"payment-form\" onSubmit={paymentIntent}>\n                    <div className={succeeded ? \"p-4 row justified-content-center result-message hidden\" : \"p-4 row justified-content-center result-message\" }><button\n                        disabled={processing || disabled || succeeded}\n                        className=\"col btn btn-primary\"\n                    >\n                        <span id=\"button-text\">\n                        {processing ? (\n                            <div className=\"spinner\" id=\"spinner\"></div>\n                        ) : (\n                            \"Pay Now\"\n                        )} \n                        </span>\n                    </button></div>\n                    {/* Show any error that happens when processing the payment */}\n                    {error && (\n                        <div className=\"card-error\" role=\"alert\">\n                        {error}\n                        </div>\n                    )}\n                    \n                    </form>\n                    </div>\n                \n            </div>\n\n            <div className=\"mt-4 text-center\"><a href={returnURL} className=\"btn btn-link p-0 m-0 d-inline align-baseline\">Back</a></div>\n            </div>\n         \n          </div>\n        }\n       \n            \n        </>\n    )\n}\n\nexport default Tap;\n","import React from 'react'\nimport Tap from '../components/Tap';\n\n\nconst TapRoute = () => {\n\n    return (\n        <>\n            <Tap/>\n        </>\n    )\n}\n\nexport default TapRoute","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"/new-order\"\n});","import React , {Component, useEffect, useState} from 'react';\nimport NewOrder from '../apis/NewOrder';\n\nimport { useHistory } from \"react-router-dom\";\n\nconst Home = () => {\n    let history = useHistory();\n\n    const sampleOrder = async() =>{\n        console.log(\"send request to server and redirect automatically\");\n        try {\n        const response = await NewOrder.post(\"/\", {\n                items : [\n                    \n                    {\n                        name: \"1/2 of an Oat Milk Latte\",\n                        price : 250\n                    }\n                    ],\n                subtotal: 250,\n                shipping: 0,\n                taxes: 0,\n                total: 250,\n                storename: \"Donate a coffee to the developer\",\n                acctID: \"acct_1IkFrCKZrLHZ09xO\",\n                returnURL : \"https://www.cardlist.co\",\n                successURL : \"https://www.cardlist.co\"\n        });\n        console.log(response)\n        window.location.replace(response.data.data.redirect);\n    }\n    catch(err){\n        console.log(err);\n    }\n\n\n    }\n\n    const integrationRedirect = async()=>{\n        history.push(\"/integration\");\n    }\n\n    \n    return (\n        <>\n            <div className=\"text-center pt-5\">\n                <h2>CardList 💳</h2>\n                <h5>Increase conversion rates and checkout time by letting customers save their card data in Stripe.</h5>\n                <p>No extra fee on top of Stripe fees 🎉(FREE)🎉</p>\n                <br></br>\n                <div className=\"container \">\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-4\">\n                            <button  onClick={sampleOrder} className=\"btn btn-primary  btn-small\">Try it out</button>\n                            <p>You can buy me a coffee :)</p>\n                        </div>\n                        <div className=\"col-4\">\n                            <button  onClick={integrationRedirect} className=\"btn btn-primary  btn-small\">Register</button>\n                        </div>\n                    </div>\n                    <div class=\"row justify-content-center\">\n                        <p>(The real benefit comes after the first purchase is made on our platform and the card info is saved. I've split the $5 coffee into 2x $2.50 charges so you can checkout a second time and see the full functionality) </p>\n                    </div>\n                </div>\n                \n                \n                </div>\n            <div>\n            </div>\n        </>\n            \n        \n    )\n}\n\nexport default Home","import React from 'react';\nimport Home from '../components/Home';\n\n\nconst HomeRoute = () => {\n\n    return (\n        <>\n            <Home/>\n        </>\n    )\n}\n\nexport default HomeRoute","import React , {Component, useEffect, useState} from 'react';\nimport { useParams} from \"react-router-dom\";\nconst Success = () => {\n    const {id} = useParams();\n    return (\n        <>\n            <h1>You have successfully onboarded with CardList!</h1>\n            <p>Your acctID is {id}</p>\n            <p>Now that you have your Stripe Connected AcctID, click below to open the Postman request for creating new CardList orders</p>\n                    <a href={\"https://app.getpostman.com/run-collection/e84dc45f266ef6e49341\"} className=\"btn btn-link p-0 m-0 d-inline align-baseline\">Postman Collection</a>\n                \n            <p>In production, you'll want your server to send a request to the CoinList endpoint each time a customer clicks on their checkout button.</p>\n            <p>Each request body requires information about the order like items, prices, acctID, etc, and returns a url for you to redirect your customer to.</p>\n            <p>Contact info for integration help: design0reilly@gmail.com</p>\n        </>\n    )\n    }\nexport default Success","import React from 'react';\nimport Success from '../components/Success';\n\nconst SuccessRoute = () => {\n    \n    return (\n        <>\n            <Success/>\n        </>\n    )\n}\n\nexport default SuccessRoute","import axios from \"axios\";\n\n\nexport default axios.create({\n    \n    baseURL: \"/onboard-user\"\n});","import React , {Component, useEffect, useState} from 'react';\n\nimport { useHistory } from \"react-router-dom\"\nimport Onboard from '../apis/Onboard';\n\nconst Integration = () => {\n    \n    let history = useHistory()\n    const handleBack = () => {\n        history.push(`/`)\n    };\n\n    const setupPayouts = async ()=>{\n        console.log(\"stripe onboarding\");\n        const response = await Onboard.post(\"/\", {});\n        if (response.data.url) {\n            window.location = response.data.url;\n          }\n    }\n    return (\n        <>\n                <div className=\"container text-center\">\n                    <div class=\"row mt-2\">\n                        <div class=\"col-3\"></div>\n                        <div class=\"col-6\"><h4 className=\"\">Start using CardList</h4></div>\n                        <div class=\"col-3\"><button onClick={(e)=> handleBack(e)} className=\"btn btn-warning \">Back</button></div>\n                    </div>\n                    \n                    <div class=\"pb-2\">\n                        <br></br>\n                        <p>We use <b>Stripe</b> to enable your customers to save payment information securely. </p>\n                        \n                        <p>Just complete a simple Stripe Connect onbaording flow and you'll be ready to use CardList!</p>\n                        \n                        <button  onClick={setupPayouts} className=\"btn btn-primary  btn-small\">Setup Payouts on Stripe</button>\n                        <br></br>\n                        <br></br>\n                        <p>Once you have your Stripe Connected AcctID, click below to open the Postman request for creating new CardList orders</p>\n                        <a href={\"https://app.getpostman.com/run-collection/e84dc45f266ef6e49341\"} className=\"btn btn-link p-0 m-0 d-inline align-baseline\">Postman Collection</a>\n                        <br></br>\n                        <br></br>\n                        <p>Simply send a request to our server with your customer's order details, redirect them to our checkout page, and we'll let them checkout with a new card or a payment method they've stored during previous purchases on our platform. </p>\n                    \n                    </div>\n                </div>\n            <div>\n            </div>\n        </>\n            \n        \n    )\n}\n\nexport default Integration","import React from 'react';\nimport Integration from '../components/Integration';\n\n\nconst IntegrationRoute = () => {\n\n    return (\n        <>\n            <Integration/>\n        </>\n    )\n}\n\nexport default IntegrationRoute","import React , {useState} from 'react';\n\nimport {Switch, Route} from \"react-router-dom\";\nimport { BrowserRouter as Router, useParams } from 'react-router-dom';\nimport Tap from \"./routes/Tap\";\nimport Home from \"./routes/Home\";\nimport Success from \"./routes/OnboardSuccess\";\nimport Integration from \"./routes/Integration\";\nimport {Helmet} from \"react-helmet\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nconst App = () => {\n\n    const [promise,setPromise] = useState(() => loadStripe(\"pk_live_51HX92ADV5bqQz6pNkugJCzdENiJmAW3ghEm9ckAdKKhE7kGF55hASD3QQc12BwEXIXNCifNwzr4IBnkvElOpKVFK00Iecjr8sF\"));\n    \n    return (\n        \n    <>\n        <div className=\"container\">\n            <Router>\n                <Switch>\n                    <Elements stripe= {promise}>\n                        <Route exact path=\"/pay/:id\" component={Tap}/>\n                        <Route exact path=\"/integration\" component={Integration}/>\n                        <Route exact path=\"/\" component={Home}/>\n                        <Route exact path=\"/success/:id\" component={Success}/>\n                    </Elements>\n                    \n                </Switch>\n                \n            </Router>\n        </div>\n        \n        \n    </>\n    \n\n    )\n\n}\n\nexport default App;","import React, {useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from \"./App\"\n\nReactDOM.render(<App/>,document.getElementById(\"root\"));\n"],"sourceRoot":""}